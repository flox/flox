commit b98a4d657425451bc566514cad6dd40da3b3c80c
Author: Michael Brantley <brantley@floxdev.com>
Date:   Sun Jul 2 14:06:48 2023 +0100

    no-default-prefixes-hash.2.15.1.patch

diff --git a/src/libcmd/installable-flake.cc b/src/libcmd/installable-flake.cc
index 48e21e830..61d3f4b00 100644
--- a/src/libcmd/installable-flake.cc
+++ b/src/libcmd/installable-flake.cc
@@ -25,15 +25,28 @@
 
 namespace nix {
 
-std::vector<std::string> InstallableFlake::getActualAttrPaths()
+std::vector<std::vector<nix::Symbol>> InstallableFlake::getActualAttrPaths(EvalState &state)
 {
-    std::vector<std::string> res;
+    std::vector<std::vector<nix::Symbol>> res;
+
+    // check whether attrPath starts with `.` or `"".`
+    // `"".` may occur if the attributes of an attrpath are escaped
+    if (attrPaths.size() == 1)
+    {
+        std::vector<nix::Symbol> attrPath = parseAttrPath(state, attrPaths.front());
+        if (attrPath.size() > 0 && state.symbols.resolve(attrPath).front() == "")
+        {
+            attrPath.erase(attrPath.begin());
+            res.push_back(attrPath);
+            return res;
+        }
+    }
 
     for (auto & prefix : prefixes)
-        res.push_back(prefix + *attrPaths.begin());
+        res.push_back(parseAttrPath(state, prefix + *attrPaths.begin()));
 
     for (auto & s : attrPaths)
-        res.push_back(s);
+        res.push_back(parseAttrPath(state, s));
 
     return res;
 }
@@ -52,12 +65,23 @@ Value * InstallableFlake::getFlakeOutputs(EvalState & state, const flake::Locked
     return aOutputs->value;
 }
 
-static std::string showAttrPaths(const std::vector<std::string> & paths)
+static std::string showAttrPaths(const std::vector<std::vector<nix::Symbol>> & paths, const nix::SymbolTable & symbolTable)
 {
     std::string s;
     for (const auto & [n, i] : enumerate(paths)) {
-        if (n > 0) s += n + 1 == paths.size() ? " or " : ", ";
-        s += '\''; s += i; s += '\'';
+        auto string_symbols = symbolTable.resolve(i);
+
+        std::string path;
+        for (const auto &[n, i] : enumerate(string_symbols))
+        {
+            path += i;
+            if (n < string_symbols.size() -1)
+                path += ".";
+        }
+
+        if (n > 0)
+            s += n + 1 == paths.size() ? " or " : ", ";
+        s += '\''; s += path; s += '\'';
     }
     return s;
 }
@@ -190,12 +214,20 @@ InstallableFlake::getCursors(EvalState & state)
     std::vector<ref<eval_cache::AttrCursor>> res;
 
     Suggestions suggestions;
-    auto attrPaths = getActualAttrPaths();
+    auto attrPaths = getActualAttrPaths(state);
 
     for (auto & attrPath : attrPaths) {
-        debug("trying flake output attribute '%s'", attrPath);
+        std::string attrPathS;
+        for (const auto & [ n, symbol ] : enumerate(state.symbols.resolve(attrPath)))
+        {
+            attrPathS += symbol;
+            if (n < attrPath.size() -1)
+                attrPathS += ".";
+        }
+
+        debug("trying flake output attribute '%s'", attrPathS);
 
-        auto attr = root->findAlongAttrPath(parseAttrPath(state, attrPath));
+        auto attr = root->findAlongAttrPath(attrPath);
         if (attr) {
             res.push_back(ref(*attr));
         } else {
@@ -208,7 +240,7 @@ InstallableFlake::getCursors(EvalState & state)
             suggestions,
             "flake '%s' does not provide attribute %s",
             flakeRef,
-            showAttrPaths(attrPaths));
+            showAttrPaths(attrPaths, state.symbols));
 
     return res;
 }
diff --git a/src/libcmd/installable-flake.hh b/src/libcmd/installable-flake.hh
index 7ac4358d2..bf74a20df 100644
--- a/src/libcmd/installable-flake.hh
+++ b/src/libcmd/installable-flake.hh
@@ -50,7 +50,7 @@ struct InstallableFlake : InstallableValue
 
     std::string what() const override { return flakeRef.to_string() + "#" + *attrPaths.begin(); }
 
-    std::vector<std::string> getActualAttrPaths();
+    std::vector<std::vector<nix::Symbol>> getActualAttrPaths(EvalState & state);
 
     Value * getFlakeOutputs(EvalState & state, const flake::LockedFlake & lockedFlake);
 
