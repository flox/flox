flox-cli-tests: Running test suite with:
  PROJECT_TESTS_DIR:        /Users/zmitchell/src/flox/double-bashrc-exec/cli/tests
  bats                      /nix/store/4c5x3l6idiqq4anwwcw8vjdi3il2p6bh-bats-with-libraries-1.12.0/bin/bats
  bats options              --print-output-on-failure --verbose-run --timing --jobs 4 --no-parallelize-across-files 
  bats tests                activate.bats
1..255
_FLOX_LOCAL_DEV: 1
FLOX_BIN: /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox
BUILDENV_BIN: /Users/zmitchell/src/flox/double-bashrc-exec/build/flox-buildenv/bin/buildenv
WATCHDOG_BIN: /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox-watchdog
FLOX_ACTIVATIONS_BIN: /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox-activations
FLOX_INTERPRETER: /Users/zmitchell/src/flox/double-bashrc-exec/build/flox-interpreter
NIX_PLUGINS: /Users/zmitchell/src/flox/double-bashrc-exec/build/nix-plugins/lib/nix-plugins
NIX_BIN: /nix/store/cc3lbc73ysk9bic3ji1vbbh7gdq31azz-nix-2.28.4/bin/nix
NIX_STORE: /nix/store
REAL_GIT_CONFIG_GLOBAL: /Users/zmitchell/.gitconfig
REAL_GIT_CONFIG_SYSTEM: /etc/gitconfig
REAL_HOME: /Users/zmitchell
REAL_XDG_CACHE_HOME: /Users/zmitchell/.cache
REAL_XDG_CONFIG_HOME: /Users/zmitchell/.config
REAL_XDG_DATA_HOME: /Users/zmitchell/.local/share
REAL_XDG_STATE_HOME: /Users/zmitchell/.local/state
TESTS_DIR: /tmp/nix-shell.ZT2M3S/flox-cli-tests-sOv5pb
INPUT_DATA: /Users/zmitchell/src/flox/double-bashrc-exec/test_data/input_data
GENERATED_DATA: /Users/zmitchell/src/flox/double-bashrc-exec/test_data/generated
MANUALLY_GENERATED: /Users/zmitchell/src/flox/double-bashrc-exec/test_data/manually_generated
UNIT_TEST_GENERATED: /Users/zmitchell/src/flox/double-bashrc-exec/test_data/unit_test_generated
FLOX_TEST_HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home
HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home
PATH: /nix/store/6zaza3y7g04ilxmfr0l4vl1xrlxhbdz4-bats-1.12.0/libexec/bats-core:/Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug:/nix/store/fx3w71jy6d57i32k58jh6n5z1l8lii6z-bash-interactive-5.3p3/bin:/nix/store/lpw8c8czj01smmliz4y80bpikkm53q0s-fish-4.0.2/bin:/nix/store/s9iglfj14vbv1n9pwsambfly96x6i20v-tcsh-6.24.16/bin:/nix/store/8sifsbv26zrg9j7mq5mx376ib151zvis-zsh-5.9/bin:/nix/store/x9lf4y7s4yp6il66mv5npc2f99yy4vgq-dash-0.5.12/bin:/nix/store/4c5x3l6idiqq4anwwcw8vjdi3il2p6bh-bats-with-libraries-1.12.0/bin:/nix/store/9i147r2fj9gj295jxa0nf2m4nwdkc94r-coreutils-9.7/bin:/nix/store/gv7qf6zgiarqg83hvmpmhp8kzlq628zd-curl-8.14.1-bin/bin:/nix/store/6p1kfmr4lsn6w42rnq2svg0gmwshr94s-diffutils-3.12/bin:/nix/store/y2h7s8wnisy2bdpaa1ljhccwamm6pidd-entr-5.7/bin:/nix/store/wh0gha8mr742ln775k0m24a4p81rh830-expect-5.45.4/bin:/nix/store/c09zwg0n8sgii76cy1ggmfs950srn4fv-findutils-4.10.0/bin:/nix/store/ahsg0s563409iwkin6pyyxxfwhrscrqs-gawk-5.3.2/bin:/nix/store/56avrmkafl3ymr5azsgx4lagzrhc79nd-git-2.50.1/bin:/nix/store/rvhvjvwcssnz7i8yyp436h7qrql2pvcz-gnugrep-3.12/bin:/nix/store/8dggzrv5nih8myns336b0gqp30czlg8d-gnupg-2.4.8/bin:/nix/store/vl63mv5qaqyfgb3y76p8zijacjm2rif3-gnused-4.9/bin:/nix/store/7gb37jk1hjsb8kww238by7cw1qi9sczm-gnutar-1.35/bin:/nix/store/w58c3ip3177vib3zwnmnjk5q62hvfjqz-jq-1.8.1-bin/bin:/nix/store/ip6srscrihwxkhw4jq0v5wsayvc1iwin-man-db-2.13.1/bin:/nix/store/h6sr3zbvrla8i2vj5dc89ip24irs026c-ncurses-6.5/bin:/nix/store/cc3lbc73ysk9bic3ji1vbbh7gdq31azz-nix-2.28.4/bin:/nix/store/49psgc9m367a2zbg19xl0iyx4bplzaxx-openssh-10.0p2/bin:/nix/store/d1pf44a897gpa7yl4sc5y7vsnhdladrh-parallel-20250822/bin:/nix/store/lc0ziwvh7ikpq5057i1jr4438g6w8hdb-pstree-2.39/bin:/nix/store/rh7j7kxc799ri5c71fsymhm50by3bhy3-util-linux-1003.1-2008/bin:/nix/store/7ih1f9q5731w0i3p8h3lqd997mrhf15b-util-linux-2.41.1-bin/bin:/nix/store/ib5b16x3rb6lhwbhj3jy604hyfv8f1pf-which-2.23/bin:/nix/store/cwkvnk1i3is9h369g6s9qrd4h4ynf9qr-python3.13-yq-3.4.3/bin:/nix/store/27ws9d0s33whr7dr11n6bs4j171v4c42-process-compose-1.73.0/bin:/nix/store/p5mdgdar62yhm29y9fignx7szp7i8vny-procps-1003.1-2008/bin:/nix/store/bxsjr6ivqilmb5d5ayq5bc24lia7r3vk-podman-5.6.0/bin:/run/wrappers/bin:/nix/store/ycb672sy3cadcaahyxscblrzdmja9grg-locale/bin
XDG_CACHE_HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.cache
XDG_CONFIG_HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.config
XDG_DATA_HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.local/share
XDG_STATE_HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.local/state
FLOX_CACHE_DIR: /tmp/flox.tests.9uLjo8
FLOX_CONFIG_DIR: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.config/flox
FLOX_DATA_HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.local/share/flox
FLOX_STATE_HOME: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.local/state/flox
FLOX_META: /tmp/flox.tests.9uLjo8/meta
FLOX_ENVIRONMENTS: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/home/.local/share/flox/environments
NIX_SYSTEM: aarch64-darwin
FLOX_LATEST_VERSION: 1.7.3
FLOX_TEST_SSH_KEY: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/ssh/id_ed25519
SSH_AUTH_SOCK: /tmp/nix-shell.ZT2M3S/ssh-BHAQABZjNjnF/agent.85656
GIT_CONFIG_SYSTEM: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/git/gitconfig.system
GIT_CONFIG_GLOBAL: /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/suite/git/gitconfig.global
TEST_NIXPKGS_REV_NEW: ab5fd150146dcfe41fda501134e6503932cc8dfd
ok 1 bash: interactive activate puts package in path in 927ms
ok 2 fish: interactive activate puts package in path in 1219ms
ok 3 tcsh: interactive activate puts package in path in 868ms
ok 4 zsh: interactive activate puts package in path in 1888ms
ok 5 zsh: interactive activate works with VCS plugins in 2180ms
ok 6 bash: interactive activate runs profile scripts in 649ms
ok 7 bash: command activate runs profile scripts in 540ms
ok 8 bash: command activate skips profile scripts with FLOX_NOPROFILE in 546ms
ok 9 bash: activation script can be run directly in 859ms
ok 10 bash: activation script can be run with --noprofile in 493ms
ok 11 fish: interactive activate runs profile scripts in 946ms
ok 12 fish: command activate runs profile scripts in 661ms
ok 13 fish: command activate skips profile scripts with FLOX_NOPROFILE in 650ms
ok 14 fish: activation script can be run directly in 2025ms
ok 15 fish: activation script can be run directly with --noprofile in 644ms
ok 16 tcsh: interactive activate runs profile scripts in 616ms
ok 17 tcsh: command activate runs profile scripts in 547ms
ok 18 tcsh: command activate skips profile scripts with FLOX_NOPROFILE in 549ms
ok 19 tcsh: activation script can be run directly in 1000ms
ok 20 tcsh: activation script can be run directly with --noprofile in 506ms
ok 21 zsh: interactive activate runs profile scripts in 1574ms
ok 22 zsh: command activate runs profile scripts in 1076ms
ok 23 zsh: command activate skips profile scripts with FLOX_NOPROFILE in 553ms
ok 24 zsh: activation script can be run directly in 1790ms
ok 25 zsh: activation script can be run directly with --noprofile in 476ms
ok 26 bash: activate runs hook only once in nested activation in 582ms
ok 27 fish: activate runs hook only once in nested activation in 722ms
ok 28 tcsh: activate runs hook only once in nested activation in 5609ms
ok 29 zsh: activate runs hook only once in nested activations in 1107ms
ok 30 bash: activate runs profile only once with repeated in-place activation in 571ms
ok 31 fish: activate runs profile only once with repeated in-place activation in 726ms
ok 32 tcsh: activate runs profile only once with repeated in-place activation in 697ms
ok 33 zsh: activate runs profile only once with repeated in-place activation in 1108ms
ok 34 bash: activate command-mode runs hook and profile scripts only once in 558ms
ok 35 bash: interactive activate runs hook and profile scripts only once in 603ms
ok 36 zsh: activate command-mode runs hook and profile scripts only once in 1098ms
ok 37 zsh: interactive activate runs hook and profile scripts only once in 1469ms
ok 38 bash: activate respects ~/.bashrc in 589ms
ok 39 fish: activate respects ~/.config/fish/config.fish in 898ms
ok 40 tcsh: activate respects ~/.tcshrc in 612ms
ok 41 zsh: activate respects ~/.zshrc in 1547ms
ok 42 zsh: interactive activate respects history settings from dotfile in 1572ms
ok 43 zsh: interactive activate respects history settings from dotfile based on original ZDOTDIR in 1585ms
ok 44 zsh: interactive activate respects history settings from environment variable where available in 1603ms
ok 45 zsh: uses environment specific completion cache in 2157ms
ok 46 bash: activate sets env var in 759ms
ok 47 fish: activate sets env var in 1189ms
ok 48 tcsh: activate sets env var in 752ms
ok 49 zsh: activate sets env var in 1709ms
ok 50 bash: activate sets env var before hook in 551ms
ok 51 fish: activate sets env var before hook in 646ms
ok 52 tcsh: activate sets env var before hook in 552ms
ok 53 zsh: activate sets env var before hook in 1088ms
ok 54 'flox activate' modifies path (bash) in 898ms
ok 55 'flox activate' modifies path (fish) in 1173ms
ok 56 'flox activate' modifies path (tcsh) in 907ms
ok 57 'flox activate' modifies path (zsh) in 1423ms
ok 58 'flox activate' prints script to modify current shell (bash) in 5536ms
ok 59 'flox activate' prints script to modify current shell (fish) in 5534ms
ok 60 'flox activate' prints script to modify current shell (tcsh) in 5524ms
ok 61 'flox activate' prints script to modify current shell (zsh) in 5541ms
ok 62 'flox activate' modifies the current shell (bash) in 636ms
ok 63 'flox activate' modifies the current shell (fish) in 755ms
ok 64 'flox activate' modifies the current shell (tcsh) in 643ms
ok 65 'flox activate' modifies the current shell (zsh) in 647ms
ok 66 indented heredocs in the manifest are outdented (bash) in 569ms
ok 67 indented heredocs in the manifest are outdented (zsh) in 1071ms
ok 68 indented heredocs in the manifest are outdented (tcsh) in 562ms
ok 69 bash: 'flox activate' patches PATH correctly when already activated in 760ms
ok 70 fish: 'flox activate' patches PATH correctly when already activated in 1054ms
ok 71 tcsh: 'flox activate' patches PATH correctly when already activated in 829ms
ok 72 zsh: 'flox activate' patches PATH correctly when already activated in 1261ms
ok 73 'flox activate' sets python vars if python is installed in 808ms
ok 74 'flox activate' retains existing python vars if python is not installed in 690ms
ok 75 'flox *' uses local environment over 'default' environment in 1036ms
ok 76 'hook.on-activate' runs in 554ms
ok 77 'hook.on-activate' modifies environment variables (bash) in 552ms
ok 78 'hook.on-activate' modifies environment variables (fish) in 696ms
ok 79 'hook.on-activate' modifies environment variables (tcsh) in 574ms
ok 80 'hook.on-activate' modifies environment variables (zsh) in 1100ms
ok 81 'hook.on-activate' modifies environment variables for first nested activation (bash) in 559ms
ok 82 'hook.on-activate' modifies environment variables for first nested activation (fish) in 721ms
ok 83 'hook.on-activate' modifies environment variables for first nested activation (tcsh) in 692ms
ok 84 'hook.on-activate' modifies environment variables for first nested activation (zsh) in 1107ms
ok 85 'hook.on-activate' unsets environment variables for first nested activation (bash) in 591ms
ok 86 'hook.on-activate' unsets environment variables for first nested activation (fish) in 707ms
ok 87 'hook.on-activate' unsets environment variables for first nested activation (tcsh) in 589ms
ok 88 'hook.on-activate' unsets environment variables for first nested activation (zsh) in 1199ms
ok 89 bash: 'hook.on-activate' is sourced before 'profile.common' in 599ms
ok 90 fish: 'hook.on-activate' is sourced before 'profile.common' in 703ms
ok 91 tcsh: 'hook.on-activate' is sourced before 'profile.common' in 583ms
ok 92 zsh: 'hook.on-activate' is sourced before 'profile.common' in 564ms
ok 93 bash: 'profile.common' is sourced before 'profile.bash' in 564ms
ok 94 fish: 'profile.common' is sourced before 'profile.fish' in 718ms
ok 95 tcsh: 'profile.common' is sourced before 'profile.tcsh' in 601ms
ok 96 zsh: 'profile.common' is sourced before 'profile.zsh' in 570ms
ok 97 bash: tolerates env paths containing spaces in 590ms
ok 98 fish: tolerates env paths containing spaces in 756ms
ok 99 tcsh: tolerates env paths containing spaces in 620ms
ok 100 zsh: tolerates env paths containing spaces in 602ms
ok 101 bash: tolerates PATH already containing spaces in 558ms
ok 102 fish: tolerates PATH already containing spaces in 713ms
ok 103 tcsh: tolerates PATH already containing spaces in 609ms
ok 104 zsh: tolerates PATH already containing spaces in 582ms
ok 105 bash: tolerates cwd containing braces in 582ms
ok 106 fish: tolerates cwd containing braces in 742ms
ok 107 tcsh: tolerates cwd containing braces in 135ms # skip Apparently regressed in 1.4.3, now failing with Missing '}', due to quoting in _FLOX_ACTIVE_ENVIRONMENTS (#3173)
ok 108 zsh: tolerates cwd containing braces in 595ms
ok 109 bash: test for infinite source loop in 579ms
ok 110 fish: test for infinite source loop in 840ms
ok 111 tcsh: test for infinite source loop in 574ms
ok 112 zsh: test for infinite source loop in 1045ms
ok 113 bash: preserve custom ZDOTDIR in 544ms
ok 114 fish: preserve custom ZDOTDIR in 642ms
ok 115 tcsh: preserve custom ZDOTDIR in 540ms
ok 116 zsh: preserve custom ZDOTDIR in 1072ms
ok 117 zsh: in-place activation with non-interactive non-login shell in 577ms
ok 118 zsh: in-place activation with interactive non-login shell in 1073ms
ok 119 zsh: in-place activation with interactive login shell in 1049ms
ok 120 zsh: in-place activation from .zshenv in 985ms
ok 121 zsh: activation after in-place activation from .zshrc in 12165ms
ok 122 zsh: in-place activation from .zlogin in 1111ms
ok 123 zsh: in-place activation from .zprofile in 1113ms
ok 124 command: activation does not leak FLOX_SHELL variable in 543ms
ok 125 in-place: activation does not leak FLOX_SHELL variable in 541ms
not ok 126 bash: confirm hooks and dotfiles sourced correctly in 585ms
# tags: activate activate activate:validate_hook_and_dotfile_sourcing
# (from function `assert_equal' in file /nix/store/4c5x3l6idiqq4anwwcw8vjdi3il2p6bh-bats-with-libraries-1.12.0/share/bats/bats-assert/src/assert_equal.bash, line 40,
#  in test file activate.bats, line 2582)
#   `assert_equal "${lines[3]}" "sourcing profile.common"' failed
# ✨ Created environment 'project-126' (aarch64-darwin)
#
# Next:
#   $ flox search <package>    <- Search for a package
#   $ flox install <package>   <- Install a package into an environment
#   $ flox activate            <- Enter the environment
#   $ flox edit                <- Add environment variables and shell hooks
#   $ flox push                <- Use the environment from other machines or
#                                 share it with someone on FloxHub
#
# Testing bash
# Sourcing .profile
# Setting PATH from .profile
# sourcing hook.on-activate
# Sourcing .bashrc
# Setting PATH from .bashrc
# sourcing profile.common
# sourcing profile.bash
#
# -- values do not equal --
# expected : sourcing profile.common
# actual   : Sourcing .bashrc
# --
#
# Last output:
# Sourcing .profile
# Setting PATH from .profile
# sourcing hook.on-activate
# Sourcing .bashrc
# Setting PATH from .bashrc
# sourcing profile.common
# sourcing profile.bash
ok 127 fish: confirm hooks and dotfiles sourced correctly in 707ms
ok 128 tcsh: confirm hooks and dotfiles sourced correctly in 575ms
ok 129 zsh: confirm hooks and dotfiles sourced correctly in 1075ms
ok 130 bash: confirm _flox_activate_tracelevel set in nested activation in 606ms
ok 131 fish: confirm _flox_activate_tracelevel set in nested activation in 922ms
ok 132 tcsh: confirm _flox_activate_tracelevel set in nested activation in 698ms
ok 133 zsh: confirm _flox_activate_tracelevel set in nested activation in 1537ms
ok 134 profile: RUST_SRC_PATH set when rustPlatform.rustLibSrc installed in 620ms
ok 135 profile: JUPYTER_PATH not modified when Jupyter is not installed in 655ms
ok 136 profile: JUPYTER_PATH is modified when Jupyter is installed in 2889ms
ok 137 profile: CMAKE_PREFIX_PATH not modified when cmake is not installed in 634ms
ok 138 profile: CMAKE_PREFIX_PATH is modified when cmake is installed in 641ms
ok 139 activate works with fish 3.2.2 in 758ms
ok 140 in-place activate works with bash 3 in 680ms
ok 141 no unset variables in bash in 556ms
ok 142 no unset variables in zsh in 582ms
ok 143 nested interactive activate fails in 750ms
ok 144 interactive: attach runs hook once in 674ms
ok 145 command-mode: attach runs hook once in 687ms
ok 146 in-place: attach runs hook once in 677ms
ok 147 bash: interactive: attach runs profile twice in 672ms
ok 148 bash: command-mode: attach runs profile twice in 671ms
ok 149 bash: in-place: attach runs profile twice in 677ms
ok 150 fish: interactive: attach runs profile twice in 1211ms
ok 151 fish: command-mode: attach runs profile twice in 993ms
ok 152 fish: in-place: attach runs profile twice in 1004ms
ok 153 tcsh: interactive: attach runs profile twice in 784ms
ok 154 tcsh: command-mode: attach runs profile twice in 665ms
ok 155 tcsh: in-place: attach runs profile twice in 673ms
ok 156 zsh: interactive: attach runs profile twice in 1864ms
ok 157 zsh: command-mode: attach runs profile twice in 1324ms
ok 158 zsh: in-place: attach runs profile twice in 1309ms
ok 159 bash: interactive: attach sets vars from hook in 696ms
ok 160 bash: command-mode: attach sets vars from hook in 697ms
ok 161 bash: in-place: attach sets vars from hook in 699ms
ok 162 fish: interactive: attach sets vars from hook in 1216ms
ok 163 fish: command-mode: attach sets vars from hook in 916ms
ok 164 fish: in-place: attach sets vars from hook in 909ms
ok 165 tcsh: interactive: attach sets vars from hook in 781ms
ok 166 tcsh: command-mode: attach sets vars from hook in 771ms
ok 167 tcsh: in-place: attach sets vars from hook in 761ms
ok 168 zsh: interactive: attach sets vars from hook in 1880ms
ok 169 zsh: command-mode: attach sets vars from hook in 1343ms
ok 170 zsh: in-place: attach sets vars from hook in 1199ms
ok 171 bash: interactive: attach sets vars from profile in 707ms
ok 172 bash: command-mode: attach sets vars from profile in 682ms
ok 173 bash: in-place: attach sets vars from profile in 698ms
ok 174 fish: interactive: attach sets vars from profile in 1226ms
ok 175 fish: command-mode: attach sets vars from profile in 1000ms
ok 176 fish: in-place: attach sets vars from profile in 1003ms
ok 177 tcsh: interactive: attach sets vars from profile in 809ms
ok 178 tcsh: command-mode: attach sets vars from profile in 823ms
ok 179 tcsh: in-place: attach sets vars from profile in 838ms
ok 180 zsh: interactive: attach sets vars from profile in 2064ms
ok 181 zsh: command-mode: attach sets vars from profile in 1430ms
ok 182 zsh: in-place: attach sets vars from profile in 1317ms
ok 183 command-mode: activation gets cleaned up and subsequent activation starts in 918ms
ok 184 in-place: activation gets cleaned up and subsequent activation starts in 993ms
ok 185 in-place: repeat activations work after modifying environment in 980ms
ok 186 version: refuses to attach to an older activations.json version in 711ms
ok 187 version: upgrades the activations.json version in 745ms
ok 188 activate: sets FLOX_DISABLE_METRICS from config in 583ms
ok 189 can use fallback interpreter in 551ms
ok 190 fallback flag activates with rendered interpreter in 558ms
ok 191 can use bundled interpreter to mitigate broken bundled interpreter in 739ms
ok 192 attach doesn't break MANPATH in 1591ms
ok 193 attach doesn't break PATH in 1146ms
ok 194 bash: repeat activation in .bashrc doesn't break aliases in 1058ms
ok 195 bash: repeat activation in .bashrc creates correct PATH ordering in 1026ms
ok 196 tcsh: repeat activation in .tcshrc doesn't break aliases in 1122ms
ok 197 tcsh: repeat activation in .tcshrc creates correct PATH ordering in 1094ms
ok 198 fish: repeat activation in config.fish doesn't break aliases in 1508ms
ok 199 fish: repeat activation in config.fish creates correct PATH ordering in 1498ms
ok 200 zsh: repeat activation in .zshrc doesn't break aliases in 2468ms
ok 201 zsh: repeat activation in .zshenv doesn't break aliases in 2412ms
ok 202 zsh: repeat activation in .zshenv and .zshrc doesn't break aliases in 2336ms
ok 203 zsh: repeat activation in .zshrc creates correct PATH ordering in 2404ms
ok 204 zsh: repeat activation in .zshenv creates correct PATH ordering in 2132ms
ok 205 zsh: repeat activation in .zshenv and .zshrc creates correct PATH ordering in 2233ms
not ok 206 interactive: bash attachs to an activation from the previous release in 2492ms
# tags: activate activate activate:attach activate:attach:previous-release
# (from function `assert_output' in file /nix/store/4c5x3l6idiqq4anwwcw8vjdi3il2p6bh-bats-with-libraries-1.12.0/share/bats/bats-assert/src/assert_output.bash, line 194,
#  from function `attach_previous_release' in file activate.bats, line 4314,
#  in test file activate.bats, line 4349)
#   `attach_previous_release bash interactive' failed
# ✨ Created environment 'project-206' (aarch64-darwin)
#
# Next:
#   $ flox search <package>    <- Search for a package
#   $ flox install <package>   <- Install a package into an environment
#   $ flox activate            <- Enter the environment
#   $ flox edit                <- Add environment variables and shell hooks
#   $ flox push                <- Use the environment from other machines or
#                                 share it with someone on FloxHub
#
# ✅ Environment successfully updated.
#
# sourcing hook.on-activate for first time
# Sourcing .bashrc
# Setting PATH from .bashrc
# spawn /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox activate --dir /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/206/project-206
# ✅ Attached to existing activation of environment 'project-206'
# To stop using this environment, type 'exit'
# 
# Sourcing .bashrc
# Setting PATH from .bashrc
# DEBUG: setting prompt
# DEBUG: storing PS1: myprompt> 
# DEBUG: set PS1: flox [project-206] myprompt> 
# true && exit
# flox [project-206] myprompt> true && exit
# exit
# === BEGIN DEBUG OUTPUT ===
# spawn /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox activate --dir /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/206/project-206^M$
# M-bM-^\M-^E Attached to existing activation of environment 'project-206'^M$
# To stop using this environment, type 'exit'^M$
# ^M$
# Sourcing .bashrc^M$
# Setting PATH from .bashrc^M$
# DEBUG: setting prompt^M$
# DEBUG: storing PS1: myprompt> ^M$
# DEBUG: set PS1: flox [project-206] myprompt> ^M$
# true && exit^M$
# flox [project-206] myprompt> true && exit^M$
# exit^M$
# === END   DEBUG OUTPUT ===
# spawn /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox activate --dir /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/206/project-206
# ✅ Attached to existing activation of environment 'project-206'
# To stop using this environment, type 'exit'
#
# Sourcing .bashrc
# Setting PATH from .bashrc
# DEBUG: setting prompt
# DEBUG: storing PS1: myprompt>
# DEBUG: set PS1: flox [project-206] myprompt>
# true && exit
# flox [project-206] myprompt> true && exit
# exit
#
# -- output differs --
# expected (8 lines):
#   spawn /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox activate --dir /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/206/project-206
#   ✅ Attached to existing activation of environment 'project-206'
#   To stop using this environment, type 'exit'
#
#   Sourcing .bashrc
#   Setting PATH from .bashrc
#   flox [project-206] myprompt> true && exit
#   exit
# actual (12 lines):
#   spawn /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox activate --dir /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/206/project-206
#   ✅ Attached to existing activation of environment 'project-206'
#   To stop using this environment, type 'exit'
#
#   Sourcing .bashrc
#   Setting PATH from .bashrc
#   DEBUG: setting prompt
#   DEBUG: storing PS1: myprompt>
#   DEBUG: set PS1: flox [project-206] myprompt>
#   true && exit
#   flox [project-206] myprompt> true && exit
#   exit
# --
#
#
# Last output:
# spawn /Users/zmitchell/src/flox/double-bashrc-exec/cli/target/debug/flox activate --dir /tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/206/project-206
# ✅ Attached to existing activation of environment 'project-206'
# To stop using this environment, type 'exit'
#
# Sourcing .bashrc
# Setting PATH from .bashrc
# DEBUG: setting prompt
# DEBUG: storing PS1: myprompt>
# DEBUG: set PS1: flox [project-206] myprompt>
# true && exit
# flox [project-206] myprompt> true && exit
# exit
ok 207 interactive: tcsh attachs to an activation from the previous release in 2456ms
ok 208 command-mode: bash attachs to an activation from the previous release in 942ms
ok 209 command-mode: fish attachs to an activation from the previous release in 1342ms
ok 210 command-mode: tcsh attachs to an activation from the previous release in 912ms
ok 211 command-mode: zsh attachs to an activation from the previous release in 1429ms
ok 212 in-place: bash attachs to an activation from the previous release in 953ms
ok 213 in-place: fish attachs to an activation from the previous release in 1327ms
ok 214 in-place: tcsh attachs to an activation from the previous release in 941ms
ok 215 in-place: zsh attachs to an activation from the previous release in 1444ms
ok 216 profile scripts run for all environments in nested bash interactive activation in 1017ms
ok 217 profile scripts run for all environments in nested fish interactive activation in 1679ms
ok 218 profile scripts run for all environments in nested tcsh interactive activation in 1018ms
ok 219 profile scripts run for all environments in nested zsh interactive activation in 2625ms
ok 220 profile scripts run for all environments in nested bash command activation in 970ms
ok 221 profile scripts run for all environments in nested fish command activation in 1303ms
ok 222 profile scripts run for all environments in nested tcsh command activation in 987ms
ok 223 profile scripts run for all environments in nested zsh command activation in 2058ms
ok 224 profile scripts run for all environments in nested bash in-place activation in 1064ms
ok 225 profile scripts run for all environments in nested fish in-place activation in 1357ms
ok 226 profile scripts run for all environments in nested tcsh in-place activation in 1030ms
ok 227 profile scripts run for all environments in nested zsh in-place activation in 1916ms
not ok 228 bash: FLOX_ENV_* should reflect most recent user-initiated activation in 964ms
# tags: activate
# (from function `assert_output' in file /nix/store/4c5x3l6idiqq4anwwcw8vjdi3il2p6bh-bats-with-libraries-1.12.0/share/bats/bats-assert/src/assert_output.bash, line 194,
#  from function `in_place_doesnt_override_user_initiated' in file activate.bats, line 4732,
#  in test file activate.bats, line 4748)
#   `in_place_doesnt_override_user_initiated bash' failed
# ✨ Created environment 'default-rc' (aarch64-darwin)
#
# Next:
#   $ flox search <package>    <- Search for a package
#   $ flox install <package>   <- Install a package into an environment
#   $ flox activate            <- Enter the environment
#   $ flox edit                <- Add environment variables and shell hooks
#   $ flox push                <- Use the environment from other machines or
#                                 share it with someone on FloxHub
# ✨ Created environment 'user-initiated' (aarch64-darwin)
#
# Next:
#   $ flox search <package>    <- Search for a package
#   $ flox install <package>   <- Install a package into an environment
#   $ flox activate            <- Enter the environment
#   $ flox edit                <- Add environment variables and shell hooks
#   $ flox push                <- Use the environment from other machines or
#                                 share it with someone on FloxHub
# FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/run/aarch64-darwin.user-initiated.dev
# FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/cache
# FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated
# FLOX_ENV_DESCRIPTION: user-initiated
# ---
# FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/run/aarch64-darwin.default-rc.dev
# FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/cache
# FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc
# FLOX_ENV_DESCRIPTION: default-rc
# ---
# FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/run/aarch64-darwin.user-initiated.dev
# FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/cache
# FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated
# FLOX_ENV_DESCRIPTION: user-initiated
# ---
#
# -- output differs --
# expected (10 lines):
#   FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/run/aarch64-darwin.default-rc.dev
#   FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/cache
#   FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc
#   FLOX_ENV_DESCRIPTION: default-rc
#   ---
#   FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/run/aarch64-darwin.user-initiated.dev
#   FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/cache
#   FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated
#   FLOX_ENV_DESCRIPTION: user-initiated
#   ---
# actual (15 lines):
#   FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/run/aarch64-darwin.user-initiated.dev
#   FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/cache
#   FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated
#   FLOX_ENV_DESCRIPTION: user-initiated
#   ---
#   FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/run/aarch64-darwin.default-rc.dev
#   FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/cache
#   FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc
#   FLOX_ENV_DESCRIPTION: default-rc
#   ---
#   FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/run/aarch64-darwin.user-initiated.dev
#   FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/cache
#   FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated
#   FLOX_ENV_DESCRIPTION: user-initiated
#   ---
# --
#
# Last output:
# FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/run/aarch64-darwin.user-initiated.dev
# FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/cache
# FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated
# FLOX_ENV_DESCRIPTION: user-initiated
# ---
# FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/run/aarch64-darwin.default-rc.dev
# FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc/.flox/cache
# FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/default-rc
# FLOX_ENV_DESCRIPTION: default-rc
# ---
# FLOX_ENV: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/run/aarch64-darwin.user-initiated.dev
# FLOX_ENV_CACHE: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated/.flox/cache
# FLOX_ENV_PROJECT: /private/tmp/nix-shell.ZT2M3S/bats-run-e2Fq07/test/228/project-228/user-initiated
# FLOX_ENV_DESCRIPTION: user-initiated
# ---
ok 229 fish: FLOX_ENV_* should reflect most recent user-initiated activation in 1002ms
ok 230 tcsh: FLOX_ENV_* should reflect most recent user-initiated activation in 898ms
ok 231 zsh: FLOX_ENV_* should reflect most recent user-initiated activation in 1798ms
ok 232 can activate an environment that includes environments in 1111ms
ok 233 shows notice about composition overrides when not locked in 823ms
ok 234 runs upgrade checks in the background on activate in 796ms
ok 235 bash: command: nested activation repairs (MAN)PATH in 1044ms
ok 236 bash: interactive: nested activation repairs (MAN)PATH in 1046ms
ok 237 bash: in-place: nested activation repairs (MAN)PATH in 911ms
ok 238 tcsh: command: nested activation repairs (MAN)PATH in 1007ms
ok 239 tcsh: interactive: nested activation repairs (MAN)PATH in 999ms
ok 240 tcsh: in-place: nested activation repairs (MAN)PATH in 917ms
ok 241 fish: command: nested activation repairs (MAN)PATH in 1278ms
ok 242 fish: interactive: nested activation repairs (MAN)PATH in 2012ms
ok 243 fish: in-place: nested activation repairs (MAN)PATH in 1526ms
ok 244 bash: profile scripts only run once with activation in dotfiles in 1493ms
ok 245 fish: profile scripts only run once with activation in dotfiles in 1159ms
ok 246 tcsh: profile scripts only run once with activation in dotfiles in 934ms
ok 247 zsh: profile scripts only run once with activation in dotfiles in 1820ms
ok 248 bash: shell variables are preserved in subshells in 929ms
ok 249 fish: shell variables are preserved in subshells in 1363ms
ok 250 tcsh: shell variables are preserved in subshells in 1026ms
ok 251 zsh: shell variables are preserved in subshells in 2580ms
ok 252 bash: profile scripts can modify PATH with default environment in 1177ms
ok 253 fish: profile scripts can modify PATH with default environment in 133ms # skip broken on fish
ok 254 tcsh: profile scripts can modify PATH with default environment in 130ms # skip broken on tcsh
ok 255 zsh: profile scripts can modify PATH with default environment in 2328ms
Error: command ["flox-cli-tests", "activate.bats"] exited with code 1
