{ lib }:

let

  /**
    This function collects all package attr paths
    from the recursive structure generated by `lib.nef.dirToAttrs`
    via a conditional fold operation.

    The result is a list of lists.

    # Example

    ```nix
    collectAttrPaths [] { path = "", type = "directory"; entries = {
      foo = { path = ""; type = "nix"; };
      bar = { path = "", type = "directory"; entries = {
          baz = { path = ""; type = "nix"; };
          bam = { path = ""; type = "nix"; };
      }; };
    };}
    =>
    [
      ["foo"]
      ["bar" "baz"]
      ["bar" "bam"]
    ]
    ```

    # Type

    ```
    collectAttrPaths :: [String] -> Attrs -> [ [ String ] ]
    ```

    # Arguments

    prefix
    : The initial attr path (usually `[]`, but can be used to set a custom prefix)

    attrsFromDir
    : An attribute set created from `lib.nef.dirToAttrs`
      It is expected that the top level is of `type = "directory"`

    :::
  */
  collectAttrPaths =
    prefix: attrsFromDir:
    {

      "nix" = [ prefix ];
      "directory" = lib.concatLists (
        lib.mapAttrsToList (name: set: collectAttrPaths (prefix ++ [ name ]) set) (attrsFromDir.entries)
      );
    }
    .${attrsFromDir.type};

  /**
    This function converts a list of attrPaths to a space separated string,
    for use as makeTargets.

    ```
    makeTargets :: [ [String] ] -> [String]
    ```
  */
  attrPathStrings =
    # list of attrpaths e.g. result from `lib.nef.reflect.collectAttrPaths
    # collectAttrPaths: map (lib.showAttrPath) collectAttrPaths;
    # HACK: Yannik to fix
    collectAttrPaths: map (x: (lib.showAttrPath x) + ":bin,dev,out,man,devdoc") collectAttrPaths;

  /*
    This function converts a list of attrPaths to a space separated string,
    for use as makeTargets.

    :::Note
    Todo: tricky attrs, e.g. containing spaces, although renaming is not possible at this point
    :::

    # Type

    ```
    makeTargets :: [ [String] ] -> String
    ```
  */
  makeTargets =
    # list of attrpaths e.g. result from `lib.nef.reflect.collectAttrPaths
    collectAttrPaths: lib.concatStringsSep " " (attrPathStrings collectAttrPaths);

in
{

  inherit
    collectAttrPaths
    attrPathStrings
    makeTargets
    ;

}
