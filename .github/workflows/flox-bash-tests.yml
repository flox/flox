# ============================================================================ #
#
#
#
# ---------------------------------------------------------------------------- #
#
name: "Flox Bash Tests"

on:
  push:
    branches:
      -  main
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


# ---------------------------------------------------------------------------- #

jobs:
  flox-bash-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    steps:
    - name: Install flox
      uses: flox/install-flox-action@v1.0.0

    - uses: actions/checkout@v3

    - name: Show Env
      run: |
        set -eu;
        set -o pipefail;
        echo "# ============================================================================ #" >&2;
        { printf '    bash   version: '; bash --version|head -n1;      } >&2;
        { printf '    nix    version: '; nix  --version;               } >&2;
        echo "# ---------------------------------------------------------------------------- #" >&2;

# ---------------------------------------------------------------------------- #

    - name: Build and Test
      run: |
        set -eu;
        set -o pipefail;
        nix profile install --impure --expr 'let
          nixpkgs = builtins.getFlake "nixpkgs";
          system  = builtins.currentSystem;
          pkgsFor = builtins.getAttr system nixpkgs.legacyPackages;
        in pkgsFor.bats.withLibraries ( p: [p.bats-support p.bats-assert] )
        ';
        nix profile install '.#nix-editor';
        pushd ./flox-bash;
        flox build '..#flox-bash';
        FLOX_PACKAGE="$PWD/result" bats tests;
        popd;


# ---------------------------------------------------------------------------- #
#
#
#
# ============================================================================ #
