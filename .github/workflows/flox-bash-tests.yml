# ============================================================================ #
#
#
#
# ---------------------------------------------------------------------------- #
#
name: "Flox Bash Tests"

on:
  push:
    branches:
      -  main
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


# ---------------------------------------------------------------------------- #

jobs:
  flox-bash-tests:
    runs-on: ubuntu-latest
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    steps:
    - name: Install flox
      uses: flox/install-flox-action@v1.0.0

    - uses: actions/checkout@v3

    - name: Show Env
      run: |
        set -eu;
        set -o pipefail;
        echo "# ============================================================================ #" >&2;
        { printf '    bash   version: '; bash --version|head -n1;      } >&2;
        { printf '    nix    version: '; nix  --version;               } >&2;
        echo "# ---------------------------------------------------------------------------- #" >&2;

# ---------------------------------------------------------------------------- #

    - name: Build and Test
      run: |
        set -eu;
        set -o pipefail;
        # Rather than using `flox develop .#flox-bash;' we explicitly install
        # the minimal collection of executables required to run the test suite.
        # The rationale is that the dev-shell contains `buildInputs' that may
        # cause executables to be resolved during tests that may not actually
        # resolve at runtime.
        # This issue did occur with `semver' and `column' in the past, so this
        # approach aims to catch this category of issue.
        nix profile install --impure --expr 'let
          nixpkgs = builtins.getFlake "nixpkgs";
          system  = builtins.currentSystem;
          pkgsFor = builtins.getAttr system nixpkgs.legacyPackages;
        in pkgsFor.bats.withLibraries ( p: [p.bats-support p.bats-assert] )
        ';
        _OS='ubuntu-latest';
        nix profile install '.#nix-editor' 'nixpkgs#libossp_uuid';
        if [[ "$_OS" = 'ubuntu-latest' ]]; then
          nix profile install 'nixpkgs#expect';
        elif [[ "$_OS" = 'macos-latest' ]]; then
          # TODO: discover additional required packages and then enable
          # `macos-latest' in the system matrix at the top of this file.
          #
          # NOTE: the `expect' package for Darwin is broken, so we don't
          # attempt to install it.
          # The test suite will skip tests which require `expect' when it is
          # not available in `PATH', so we'll still get some results.
          nix profile install 'nixpkgs#coreutils' 'nixpkgs#gnumake';
        fi
        pushd ./flox-bash;
        flox build '..#flox-bash';
        FLOX_PACKAGE="$PWD/result" bats tests;
        popd;


# ---------------------------------------------------------------------------- #
#
#
#
# ============================================================================ #
