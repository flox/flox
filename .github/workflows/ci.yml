name: "CI"

on:
  workflow_dispatch:
    inputs:
      enableUpterm:
        description: "Enable the Upterm server for debugging workflows in-flight"
        required: true
        default: false
        type: boolean
      breakOnJob:
        description: "Break on a specific job, to be used with the `enableUpterm` input"
        required: false
        type: choice
        options:
          - "nix-plugins-dev"
          - "cli-unit"
          - "nix-build"
          - "trigger-flox-installers-workflow"
          - "report-failure"
          - "nix-build-bats-tests"
      allowedUptermUsers:
        description: "Comma-separated list of GitHub users allowed to access the Upterm server"
        required: false
        type: string
        default: "bryanhonof,tomberek,garbas"
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
  merge_group:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.sha }}"
  cancel-in-progress: true

env:
  # Also set in setup_suite.bash but set here for consistency
  FLOX_DISABLE_METRICS: "true"

jobs:
  nix-plugins-dev:
    name: "Nix Plugins"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04-8core"
          - "macos-14-xlarge"

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v5"

      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN: "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER: "${{ vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY: "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"

      - name: "Build"
        run: nix develop -L --no-update-lock-file --command just build-nix-plugins

      - name: "Test"
        run: nix develop -L --no-update-lock-file --command just test-nix-plugins

  nef-dev:
    name: "Nix expression tests"
    runs-on: "ubuntu-22.04-8core"
    timeout-minutes: 15 # eval only tests should be plenty fast

    permissions:
      contents: read

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v5"

      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN: "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER: "${{ vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY: "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"

      - name: "Test NEF"
        run: nix develop -L --no-update-lock-file --command just test-nef

      - name: "Test buildenvLib"
        run: nix develop -L --no-update-lock-file --command just test-buildenvLib

  cli-unit:
    name: "unit"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    permissions:
      id-token: write # Needed for CodeCov

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04-8core"
          - "macos-14-xlarge"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v5"

      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN: "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER: "${{ vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY: "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"

      - name: "Cache Cargo"
        uses: "actions/cache@v4"
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: "cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "cargo-${{ runner.os }}-"

      - name: "Build"
        run: nix develop -L --no-update-lock-file --command just build-cli

      - name: "CLI Unit Tests"
        # Only run unit tests if when not running specialized integration tests
        id: unit-tests
        env:
          RUST_BACKTRACE: 1
        run: nix develop -L --no-update-lock-file --command just impure-tests

      - name: "Upload CLI Unit Test Results"
        uses: "codecov/test-results-action@v1"
        if: ${{ !cancelled() && steps.unit-tests.outcome != 'skipped' }}
        with:
          disable_search: true
          files: "./cli/target/nextest/ci/junit.xml"
          flags: "dev-unittests, ${{ matrix.test-tags }}, ${{ matrix.os }}"
          verbose: true
          use_oidc: true
      - name: "Check schemas are up to date"
        run: |
          nix develop -L --no-update-lock-file --command just gen-schemas
          if ! git diff --quiet cli/schemas; then
            echo "::error::Schema files are not up to date. Please run 'just gen-schemas' and commit the changes."
            git status
            git diff
            exit 1
          fi

  nix-build:
    name: "Nix build"
    runs-on: "ubuntu-latest"
    timeout-minutes: 120

    permissions:
      id-token: write # Needed for AWS Creds

    outputs:
      closure-size-x86_64-linux: ${{ steps.closure.outputs.closure-size-x86_64-linux }}
      closure-size-aarch64-linux: ${{ steps.closure.outputs.closure-size-aarch64-linux }}
      closure-size-x86_64-darwin: ${{ steps.closure.outputs.closure-size-x86_64-darwin }}
      closure-size-aarch64-darwin: ${{ steps.closure.outputs.closure-size-aarch64-darwin }}
      flox-version: ${{ steps.version.outputs.flox-version }}

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"
          - "x86_64-darwin"
          - "aarch64-linux"
          - "aarch64-darwin"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v5"
        # needed for git describe to work
        with:
          fetch-depth: 0

      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN: "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER: "${{ vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY: "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"
          TAILSCALE_URL: "${{ vars.MANAGED_TAILSCALE_URL }}"
          TAILSCALE_AUTH_KEY: "${{ secrets.MANAGED_TAILSCALE_AUTH_KEY }}"
          REMOTE_BUILDERS: "${{ vars.MANAGED_REMOTE_BUILDERS }}"
          SYSTEM: "${{ matrix.system }}"

      - name: "Configure AWS Credentials"
        uses: "aws-actions/configure-aws-credentials@v5"
        with:
          role-to-assume: "arn:aws:iam::759020684799:role/github-oidc-role-flox-cache-public"
          role-session-name: "${{ github.run_id }}"
          aws-region: "us-east-1"
          output-env-credentials: true
          unset-current-credentials: true

      - name: "Build"
        id: "build"
        run: |
          export AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY
          export AWS_SESSION_TOKEN

          for package in 'packages.${{ matrix.system }}.flox-nix-plugins' 'packages.${{ matrix.system }}.flox-cli' 'packages.${{ matrix.system }}.flox' 'packages.${{ matrix.system }}.flox-cli-tests'; do
            echo "::group::Building $package"
            ./.github/scripts/remote-execute-nix-build.sh "$package" "${{ vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
            echo "::endgroup::"
          done

      - name: "Get Flox version"
        id: "version"
        run: |
          FLOX_VERSION="${FLOX_VERSION:=$(git describe)}"
          FLOX_VERSION="${FLOX_VERSION:1}"
          echo "flox-version=$FLOX_VERSION" >> $GITHUB_OUTPUT

  trigger-flox-installers-workflow:
    name: "Build installers"
    if: ${{ (github.base_ref == 'refs/heads/main' || github.ref == 'refs/heads/main') && github.event_name == 'push' }}
    runs-on: "ubuntu-latest"
    timeout-minutes: 120

    needs:
      - "nix-build"

    steps:
      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Trigger flox-installers workflow"
        id: "trigger-workflow"
        uses: "convictional/trigger-workflow-and-wait@v1.6.5"
        with:
          owner: "flox"
          repo: "flox-installers"
          github_token: "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          github_user: "floxbot"
          workflow_file_name: "ci.yml"
          ref: "${{ github.ref_name }}"
          wait_interval: 10
          client_payload: '{"FLOX_SRC":"github:flox/flox/${{ github.event.pull_request.head.sha || github.sha }}"}'
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true

      - name: "Create shipit artifact"
        if: ${{ success() || failure() }}
        run: |
          jq -n \
            --arg "flox_installers_workflow_id" "${{ steps.trigger-workflow.outputs.workflow_id }}" \
            --arg "flox_closure_size-x86_64-linux" "${{ needs.nix-build.outputs.closure-size-x86_64-linux }}" \
            --arg "flox_closure_size-aarch64-linux" "${{ needs.nix-build.outputs.closure-size-aarch64-linux }}" \
            --arg "flox_closure_size-x86_64-darwin" "${{ needs.nix-build.outputs.closure-size-x86_64-darwin }}" \
            --arg "flox_closure_size-aarch64-darwin" "${{ needs.nix-build.outputs.closure-size-aarch64-darwin }}" \
            --arg "flox_version" "${{ needs.nix-build.outputs.flox-version }}" \
            '$ARGS.named' > shipit.json
          cat shipit.json | jq

      - name: "Upload artifact"
        uses: "actions/upload-artifact@v5"
        if: ${{ success() || failure() }}
        with:
          name: "shipit"
          path: "shipit.json"

  report-failure:
    name: "Report Failure"
    runs-on: "ubuntu-latest"
    timeout-minutes: 30

    if: ${{ failure() && (github.base_ref == 'refs/heads/main' || github.ref == 'refs/heads/main') && github.event_name == 'push' }}

    needs:
      - "nix-build"
      - "nix-plugins-dev"
      - "cli-unit"
      - "nix-build-bats-tests"

    steps:
      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Slack Notification"
        uses: "rtCamp/action-slack-notify@v2"
        env:
          SLACK_TITLE: "Something broke CI for flox/flox on ${{ github.ref_name }}"
          SLACK_FOOTER: "Thank you for caring"
          SLACK_WEBHOOK: "${{ secrets.MANAGED_SLACK_WEBHOOK }}"
          SLACK_USERNAME: "GitHub"
          SLACK_ICON_EMOJI: ":poop:"
          SLACK_COLOR: "#ff2800" # ferrari red -> https://encycolorpedia.com/ff2800
          SLACK_LINK_NAMES: true

  nix-build-bats-tests:
    name: "remote"
    runs-on: "ubuntu-latest"
    timeout-minutes: 90

    permissions:
      id-token: write # Needed for CodeCov

    needs:
      - "nix-build"

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"
          - "x86_64-darwin"
          - "aarch64-linux"
          - "aarch64-darwin"
        test-tags:
          - "containerize"
          - "!containerize"
        exclude:
          # Skip containerize tests on x86_64-darwin (except the ones enabled in the include section below)
          - system: "x86_64-darwin"
        include:
          # Disable containerize and activation tests on x86_64-darwin
          # Containerize tests are run through rosetta, and thius are slow and dont necessarily represent real usage.
          # Activation tests are taking the largest part of test runtime (up to ~10 minutes)
          # we disable these in an effort to speed up CI.
          # We assume that activation is sufficiently testsd on macos through aarch64-darwin
          # and on x86_64-darwin through the remaining integration tests
          - system: "x86_64-darwin"
            test-tags: "!containerize,!activate"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v5"

      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN: "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER: "${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY: "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"
          TAILSCALE_URL: "${{ vars.MANAGED_TAILSCALE_URL }}"
          TAILSCALE_AUTH_KEY: "${{ secrets.MANAGED_TAILSCALE_AUTH_KEY }}"
          REMOTE_BUILDERS: "${{ vars.MANAGED_REMOTE_BUILDERS }}"
          SYSTEM: "${{ matrix.system }}"

      - name: "Run Bats Tests (./#flox-cli-tests)"
        timeout-minutes: 30
        env:
          MATRIX_SYSTEM: ${{ matrix.system }}
          MATRIX_TEST_TAGS: ${{ matrix.test-tags }}
        run: ./.github/scripts/remote-execute-integration-tests.sh

      - name: "Upload Bats Tests results"
        uses: "codecov/test-results-action@v1"
        if: ${{ !cancelled() }}
        with:
          disable_search: true
          files: "./report.xml"
          flags: "nix-integration-tests, ${{ matrix.test-tags }}, ${{ matrix.system }}"
          verbose: true
          use_oidc: true
