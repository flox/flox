name: "CI"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  pull_request:
  merge_group:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.sha }}"
  cancel-in-progress: true

jobs:

  nix-build:
    name: "Nix build"
    runs-on: "ubuntu-latest"
    timeout-minutes: 120

    outputs:
      closure-size-x86_64-linux:   ${{ steps.closure.outputs.closure-size-x86_64-linux }}
      closure-size-aarch64-linux:  ${{ steps.closure.outputs.closure-size-aarch64-linux }}
      closure-size-x86_64-darwin:  ${{ steps.closure.outputs.closure-size-x86_64-darwin }}
      closure-size-aarch64-darwin: ${{ steps.closure.outputs.closure-size-aarch64-darwin }}
      flox-version:                ${{ steps.version.outputs.flox-version }}

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"
          - "x86_64-darwin"
          - "aarch64-linux"
          - "aarch64-darwin"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        # needed for git describe to work
        with:
          fetch-depth: 0

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN:    "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER:            "${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY:        "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID:      "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY:  "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY:                "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"
          TAILSCALE_URL:          "${{    vars.MANAGED_TAILSCALE_URL }}"
          TAILSCALE_AUTH_KEY:     "${{ secrets.MANAGED_TAILSCALE_AUTH_KEY }}"
          REMOTE_BUILDERS:        "${{    vars.MANAGED_REMOTE_BUILDERS }}"
          SYSTEM:                 "${{ matrix.system }}"

      - name: "Build"
        id: "build"
        run: |
          for package in '.#packages.${{ matrix.system }}.flox-pkgdb' '.#packages.${{ matrix.system }}.flox-cli' '.#packages.${{ matrix.system }}.flox' ; do
            echo "Building $package ..."
            git clean -xfd .
            if nix path-info                 \
                --store "$CONFIGURE_NIX_SUBSTITUTER"  \
                --eval-store auto            \
                --builders ''                \
                -j0                          \
                  "$package".outPath ; then
               echo "  -> Paths for $package already exists in the substituter";
            else
              nix build -L             \
                --no-update-lock-file  \
                --print-out-paths      \
                  "$package";
            fi
          done

      - name: "Get closure size"
        id: "closure"
        run: |
          NIX="nix --accept-flake-config --experimental-features 'nix-command flakes'"
          CLOSURE_SIZE=$(
            ssh github@$REMOTE_SERVER \
              -oUserKnownHostsFile=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE \
                "$NIX build github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox &&" \
                "$NIX path-info -r --json ./result" \
            | jq '[.[].narSize]|add'
          )
          echo "closure-size-${{ matrix.system }}=$CLOSURE_SIZE" >> "$GITHUB_OUTPUT"

      - name: "Get Flox version"
        id: "version"
        run: |
            FLOX_VERSION="${FLOX_VERSION:=$(git describe)}"
            FLOX_VERSION="${FLOX_VERSION:1}"
            echo "flox-version=$FLOX_VERSION" >> $GITHUB_OUTPUT


  trigger-flox-installers-workflow:
    name: "Build installers"
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    runs-on: "ubuntu-latest"
    timeout-minutes: 120

    needs:
      - "nix-build"

    steps:
      - name: "Trigger flox-installers workflow"
        id: "trigger-workflow"
        uses: "convictional/trigger-workflow-and-wait@v1.6.5"
        with:
          owner:              "flox"
          repo:               "flox-installers"
          github_token:       "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          github_user:        "floxbot"
          workflow_file_name: "ci.yml"
          ref:                "main"
          wait_interval:      10
          client_payload:     '{"FLOX_SRC":"github:flox/flox/${{ github.event.pull_request.head.sha || github.sha }}"}'
          propagate_failure:  true
          trigger_workflow:   true
          wait_workflow:      true

      - name: "Create shipit artifact"
        if: ${{ success() || failure() }}
        run: |
          jq -n \
            --arg "flox_installers_workflow_id" "${{ steps.trigger-workflow.outputs.workflow_id }}" \
            --arg "flox_closure_size-x86_64-linux" "${{ needs.nix-build.outputs.closure-size-x86_64-linux }}" \
            --arg "flox_closure_size-aarch64-linux" "${{ needs.nix-build.outputs.closure-size-aarch64-linux }}" \
            --arg "flox_closure_size-x86_64-darwin" "${{ needs.nix-build.outputs.closure-size-x86_64-darwin }}" \
            --arg "flox_closure_size-aarch64-darwin" "${{ needs.nix-build.outputs.closure-size-aarch64-darwin }}" \
            --arg "flox_version" "${{ needs.nix-build.outputs.flox-version }}" \
            '$ARGS.named' > shipit.json
          cat shipit.json | jq

      - name: "Upload artifact"
        uses: "actions/upload-artifact@v4"
        if: ${{ success() || failure() }}
        with:
          name: "shipit"
          path: "shipit.json"

  report-failure:
    name: "Report Failure"
    runs-on: "ubuntu-latest"

    if: ${{ failure() && github.ref == 'refs/heads/main' && github.event_name == 'push' }}

    needs:
      - "nix-build"
      # TODO: enable these when deemed reliable - "nix-build-bats-tests"

    steps:
      - name: "Slack Notification"
        uses: "rtCamp/action-slack-notify@v2"
        env:
          SLACK_TITLE:      "Something broke CI for flox/flox on main"
          SLACK_FOOTER:     "Thank you for caring"
          SLACK_WEBHOOK:    "${{ secrets.MANAGED_SLACK_WEBHOOK }}"
          SLACK_USERNAME:   "GitHub"
          SLACK_ICON_EMOJI: ":poop:"
          SLACK_COLOR:      "#ff2800"  # ferrari red -> https://encycolorpedia.com/ff2800
          SLACK_LINK_NAMES: true

  nix-build-bats-tests:
    name: "Flox Bats Tests"
    runs-on: "ubuntu-latest"
    timeout-minutes: 90

    needs:
      - "nix-build"

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"
          - "x86_64-darwin"
          - "aarch64-linux"
          - "aarch64-darwin"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN:    "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER:            "${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY:        "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID:      "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY:  "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY:                "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"
          TAILSCALE_URL:          "${{    vars.MANAGED_TAILSCALE_URL }}"
          TAILSCALE_AUTH_KEY:     "${{ secrets.MANAGED_TAILSCALE_AUTH_KEY }}"
          REMOTE_BUILDERS:        "${{    vars.MANAGED_REMOTE_BUILDERS }}"
          SYSTEM:                 "${{ matrix.system }}"

      - name: "Build flox"
        run: |
          git clean -xfd
          nix build -L \
              --accept-flake-config \
              --no-update-lock-file \
              --print-out-paths \
              '.#packages.${{ matrix.system }}.flox'
          # We run bats tests later on against the `FLOX_CLI' env
          echo "FLOX_CLI=$(readlink -f ./result; )/bin/flox" >> "$GITHUB_ENV"
          rm ./result

      - name: "Build Bats Tests (./#flox-cli-tests)"
        run: |
          git clean -xfd
          nix build -L \
              --no-update-lock-file \
              --print-out-paths \
              '.#packages.${{ matrix.system }}.flox-cli-tests'
          nix copy --extra-experimental-features 'nix-command' --to "$CONFIGURE_NIX_SUBSTITUTER" ./result

      - name: "Run Bats Tests (./#flox-cli-tests)"
        timeout-minutes: 30
        run: |
          git clean -xfd
          ssh github@$REMOTE_SERVER \
            -oUserKnownHostsFile=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE \
            nix run \
                --accept-flake-config \
                --extra-experimental-features '"nix-command flakes"' \
                'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox-cli-tests'
