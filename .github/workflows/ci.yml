name: "CI"

on:
  workflow_dispatch:
    inputs:
      enableUpterm:
        description: "Enable the Upterm server for debugging workflows in-flight"
        required: true
        default: false
        type: boolean
      breakOnJob:
        description: "Break on a specific job, to be used with the `enableUpterm` input"
        required: false
        type: choice
        options:
          - "nix-plugins-dev"
          - "cli-unit"
          - "nix-build"
          - "trigger-flox-installers-workflow"
          - "report-failure"
          - "nix-build-bats-tests"
      allowedUptermUsers:
        description: "Comma-separated list of GitHub users allowed to access the Upterm server"
        required: false
        type: string
        default: "bryanhonof,tomberek,garbas"
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
  merge_group:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.sha }}"
  cancel-in-progress: true

env:
  # Also set in setup_suite.bash but set here for consistency
  FLOX_DISABLE_METRICS: "true"

jobs:
  nix-build:
    name: "Nix build"
    runs-on: "ubuntu-latest"
    timeout-minutes: 120

    outputs:
      closure-size-aarch64-linux: ${{ steps.closure.outputs.closure-size-aarch64-linux }}
      flox-version: ${{ steps.version.outputs.flox-version }}

    strategy:
      fail-fast: false
      matrix:
        system:
          - "aarch64-linux"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v5"
        # needed for git describe to work
        with:
          fetch-depth: 0

      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN: "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER: "${{ vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY: "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"
          TAILSCALE_URL: "${{ vars.MANAGED_TAILSCALE_URL }}"
          TAILSCALE_AUTH_KEY: "${{ secrets.MANAGED_TAILSCALE_AUTH_KEY }}"
          REMOTE_BUILDERS: "${{ vars.MANAGED_REMOTE_BUILDERS }}"
          SYSTEM: "${{ matrix.system }}"

      - name: "Build"
        id: "build"
        run: |
          for package in '.#packages.${{ matrix.system }}.flox-nix-plugins' '.#packages.${{ matrix.system }}.flox-cli' '.#packages.${{ matrix.system }}.flox' '.#packages.${{ matrix.system }}.flox-cli-tests'; do
            echo "Building $package ..."
            git clean -xfd .
            if nix path-info                 \
                --store "$CONFIGURE_NIX_SUBSTITUTER"  \
                --eval-store auto            \
                --builders ''                \
                -j0                          \
                  "$package".outPath ; then
               echo "  -> Paths for $package already exists in the substituter";
            else
              nix build -L             \
                --no-update-lock-file  \
                --print-out-paths      \
                  "$package";
              if [[ "$package" = *flox ]]; then
                  CLOSURE_SIZE=$(nix path-info ./result -S | awk '{print $2}')
                  echo "closure-size-${{ matrix.system }}=$CLOSURE_SIZE" >> "$GITHUB_OUTPUT"
                  if [[ "$CLOSURE_SIZE" -gt 360000000 ]]; then # 360MB-ish
                    echo "  -> $package is too large: $CLOSURE_SIZE";
                    exit 1;
                  fi
              fi
            fi
          done

      - name: "Get Flox version"
        id: "version"
        run: |
          FLOX_VERSION="${FLOX_VERSION:=$(git describe)}"
          FLOX_VERSION="${FLOX_VERSION:1}"
          echo "flox-version=$FLOX_VERSION" >> $GITHUB_OUTPUT
