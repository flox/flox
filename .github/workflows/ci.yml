name: "CI"

on:
  workflow_dispatch:
    inputs:
      enableUpterm:
        description: "Enable the Upterm server for debugging workflows in-flight"
        required: true
        default: false
        type: boolean
      breakOnJob:
        description: "Break on a specific job, to be used with the `enableUpterm` input"
        required: false
        type: choice
        options:
          - "changes"
          - "pkgdb-dev"
          - "cli-dev"
          - "nix-build"
          - "trigger-flox-installers-workflow"
          - "report-failure"
          - "nix-build-bats-tests"
      allowedUptermUsers:
        description: "Comma-separated list of GitHub users allowed to access the Upterm server"
        required: false
        type: string
        default: "bryanhonof,tomberek,garbas"
  push:
    branches:
      - "main"
  pull_request:
  merge_group:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.sha }}"
  cancel-in-progress: true

env:
  # Also set in setup_suite.bash but set here for consistency
  FLOX_DISABLE_METRICS: "true"

jobs:
  cli-dev:
    name: "dev"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04-8core"
          - "macos-14-xlarge"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup upterm session"
        if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: ${{ inputs.allowedUptermUsers }}
          wait-timeout-minutes: 15

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN:    "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER:            "${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY:        "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID:      "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY:  "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY:                "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"

      - name: "Cache Cargo"
        uses: "actions/cache@v4"
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: "cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "cargo-${{ runner.os }}-"

      - name: "Build"
        run: nix develop -L --no-update-lock-file --command just build-cli

      # This differs from `nix-build-bats-tests` in that:
      #   - a cargo-built debug binary is used, like you would in local development
      #   - envrionment variables unskip some tests against live systems
      - name: "CLI Integration Tests"
        timeout-minutes: 30
        env:
          RUST_BACKTRACE: 1
          AUTH0_FLOX_DEV_CLIENT_SECRET: "${{ secrets.MANAGED_AUTH0_FLOX_DEV_CLIENT_SECRET }}"
          BATS_NO_FAIL_FOCUS_RUN: 1
        run: |
          for i in {1..100}; do
            echo "XXX: run ${i}"
            nix develop -L --no-update-lock-file --command just integ-tests
          done

      - name: "Capture process tree for failing tests"
        if: ${{ failure() }}
        run: nix develop -L --no-update-lock-file --command pstree

