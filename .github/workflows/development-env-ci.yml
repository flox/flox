name: "Development Environment CI"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  pull_request:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.sha }}"
  cancel-in-progress: true

jobs:

  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      pkgdb: ${{ steps.filter.outputs.pkgdb }}
      flox: ${{ steps.filter.outputs.flox }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: "actions/checkout@v4"

    - uses: dorny/paths-filter@v3
      id: filter
      with:
        base: ${{ github.event.merge_group.base_ref || 'main' }}
        ref: ${{ github.event.merge_group.head_ref || github.ref }}
        filters: |
          pkgdb:
            - ".github/workflows/development-env-ci.yml"
            - "pkgdb/**"
            - "pkgs/**"
            - "Justfile"
            - "flake.nix"
            - "flake.lock"
            - "shells/**"
          flox:
            - ".github/workflows/development-env-ci.yml"
            - "pkgs/**"
            - "cli/**"
            - "Justfile"
            - "flake.nix"
            - "flake.lock"
            - "shells/**"

  pkgdb-dev:
    name: "pkgdb Development Environment Tests"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    if: ${{ github.event_name == 'workflow_dispatch' || needs.changes.outputs.pkgdb == 'true' }}
    needs:
      - "changes"

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04-8core"
          - "macos-14-xlarge"

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN:    "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER:            "${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY:        "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID:      "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY:  "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY:                "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"

      - name: "Build"
        run: nix develop -L --no-update-lock-file --command just build-pkgdb

      - name: "Test"
        run: nix develop -L --no-update-lock-file --command just test-pkgdb

      - name: "Build Docs"
        run: |
          nix develop -L                   \
            --no-update-lock-file          \
            --command make -C pkgdb docs;
          chmod -c -R +rX "pkgdb/docs/"|while read line; do
            echo "::warning title=Invalid file permissions fixed::$line";
          done

      - name: "Upload artifact"
        uses: "actions/upload-pages-artifact@v3"
        if: ${{ matrix.os == 'ubuntu-22.04-8core' }}
        with:
          path: "pkgdb/docs"

      - name: "Deploy to GitHub Pages"
        if: ${{ matrix.os == 'ubuntu-22.04-8core' }}
        id: "deployment"
        uses: "actions/deploy-pages@v4"

  cli-dev:
    name: "Flox CLI Development Environmnent Tests"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120

    if: ${{ github.event_name == 'workflow_dispatch' || needs.changes.outputs.flox == 'true' }}
    needs:
      - "changes"

    strategy:
      matrix:
        os:
          - "ubuntu-22.04-8core"
          - "macos-14-xlarge"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup"
        uses: "./.github/actions/common-setup"
        with:
          GITHUB_ACCESS_TOKEN:    "${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}"
          SUBSTITUTER:            "${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}"
          SUBSTITUTER_KEY:        "${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}"
          AWS_ACCESS_KEY_ID:      "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY:  "${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}"
          SSH_KEY:                "${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}"

      - name: "Cache Cargo"
        uses: "actions/cache@v4"
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: "cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "cargo-${{ runner.os }}-"

      - name: "Build"
        run: nix develop -L --no-update-lock-file --command just build-cli

      - name: "CLI Unit Tests"
        env:
          RUST_BACKTRACE: 1
        run: nix develop -L --no-update-lock-file --command just impure-tests

      - name: "CLI Integration Tests"
        timeout-minutes: 30
        env:
          RUST_BACKTRACE: 1
          AUTH0_FLOX_DEV_CLIENT_SECRET: "${{ secrets.MANAGED_AUTH0_FLOX_DEV_CLIENT_SECRET }}"
        run: nix develop -L --no-update-lock-file --command just integ-tests

      - name: "Capture process tree for failing tests"
        if: ${{ failure() }}
        run: nix develop -L --no-update-lock-file --command pstree

  report-failure:
      name: "Report Failure"
      runs-on: "ubuntu-latest"

      if: ${{ failure() && github.ref == 'refs/heads/main' && github.event_name == 'push' }}

      needs:
        - "cli-dev"
        - "pkgdb-dev"
        # TODO: enable these when deemed reliable - "nix-build-bats-tests"

      steps:
        - name: "Slack Notification"
          uses: "rtCamp/action-slack-notify@v2"
          env:
            SLACK_TITLE:      "${{ github.action }} failed for ${{ github.repository }}"
            SLACK_FOOTER:     "Thank you for caring"
            SLACK_WEBHOOK:    "${{ secrets.MANAGED_SLACK_WEBHOOK }}"
            SLACK_USERNAME:   "GitHub"
            SLACK_ICON_EMOJI: ":poop:"
            SLACK_COLOR:      "#ff2800"  # ferrari red -> https://encycolorpedia.com/ff2800
            SLACK_LINK_NAMES: true
