name: "Common Setup"

inputs:
  GITHUB_ACCESS_TOKEN:
    required: true
  SUBSTITUTER:
    required: true
  SUBSTITUTER_KEY:
    required: true
  AWS_ACCESS_KEY_ID:
    required: true
  AWS_SECRET_ACCESS_KEY:
    required: true
  SSH_KEY:
    required: true
  TAILSCALE_URL:
    required: false
    default: ""
  TAILSCALE_AUTH_KEY:
    required: false
    default: ""
  REMOTE_BUILDERS:
    required: false
    default: ""
  SYSTEM:
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: "Install newer Nix"
      uses: "cachix/install-nix-action@v31"
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes
          accept-flake-config = true
        github_access_token: ${{ github.token }}

    - name: "Configure Nix"
      uses: "flox/configure-nix-action@bryanhonof.fix-configure-ssh-on-macos"
      with:
        github-access-token:    "${{ inputs.GITHUB_ACCESS_TOKEN }}"
        substituter:            "${{ inputs.SUBSTITUTER }}"
        substituter-key:        "${{ inputs.SUBSTITUTER_KEY }}"
        aws-access-key-id:      "${{ inputs.AWS_ACCESS_KEY_ID }}"
        aws-secret-access-key:  "${{ inputs.AWS_SECRET_ACCESS_KEY }}"
        ssh-key:                "${{ inputs.SSH_KEY }}"
        remote-builders:        "${{ inputs.REMOTE_BUILDERS }}"

    - name: "Setup Tailscale"
      if: ${{ inputs.TAILSCALE_URL && inputs.TAILSCALE_AUTH_KEY }}
      shell: "bash"
      run: |
        # Run tailscale from nixpkgs to workaround download issue:
        #   - https://github.com/tailscale/github-action/issues/158
        #
        # This is a Linux-only simplfication of:
        #   - https://github.com/tailscale/github-action/blob/v3.1.0/action.yml#L165-L182
        #   - https://github.com/tailscale/github-action/blob/v3.1.0/action.yml#L183-L205

        # `sudo -E` and `sudo --preserve-env=PATH` fail to resolve `nix` from
        # the install in the preceding step so just resolve the path ourselves.
        _nix=$(which nix)

        echo "::group::Starting tailscaled.."
        sudo $_nix shell nixpkgs#tailscale -c tailscaled --state=mem: 2>~/tailscaled.log &
        # And check that tailscaled came up. The CLI will block for a bit waiting
        # for it. And --json will make it exit with status 0 even if we're logged
        # out (as we will be). Without --json it returns an error if we're not up.
        sudo $_nix run nixpkgs#tailscale -- status --json >/dev/null
        echo "::endgroup::"

        echo "::group::Starting tailscale.."
        TIMEOUT="2m"
        HOSTNAME="${HOSTNAME:-github-$(hostname)}"
        ADDITIONAL_ARGS="--timeout 30s --login-server ${{ inputs.TAILSCALE_URL }}"
        TAILSCALE_AUTHKEY="${{ inputs.TAILSCALE_AUTH_KEY }}"
        TAGS_ARG="--advertise-tags=tag:ci"
        timeout --verbose --kill-after=1s ${TIMEOUT} \
          sudo $_nix run nixpkgs#tailscale -- \
          up ${TAGS_ARG} --authkey=${TAILSCALE_AUTHKEY} --hostname=${HOSTNAME} --accept-routes ${ADDITIONAL_ARGS}
        echo "::endgroup::"

    - name: "Find remote server to run tests on"
      if: ${{ inputs.SYSTEM }}
      shell: "bash"
      run: |
        set -eo pipefail
        export REMOTE_SERVER_ENTRY=$(cat /etc/nix/machines | shuf | grep ${{ matrix.system }} | head -1 ; )
        export REMOTE_SERVER_ADDRESS=$(echo "$REMOTE_SERVER_ENTRY" | cut -f1 -d' ' | cut -f3 -d'/' | sed 's/nixbld@//' ; )
        export REMOTE_SERVER_USER_KNOWN_HOSTS_FILE=$(mktemp)
        export REMOTE_SERVER_PUBLIC_HOST_KEY=$(echo "$REMOTE_SERVER_ENTRY" | tr -s ' ' | cut -f8 -d' ' | base64 -d ; )
        printf "%s %s\n" "$REMOTE_SERVER_ADDRESS" "$REMOTE_SERVER_PUBLIC_HOST_KEY" > "$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE"
        echo "REMOTE_SERVER_ADDRESS: $REMOTE_SERVER_ADDRESS"
        echo "REMOTE_SERVER_USER_KNOWN_HOSTS_FILE: $REMOTE_SERVER_USER_KNOWN_HOSTS_FILE"
        cat $REMOTE_SERVER_USER_KNOWN_HOSTS_FILE
        echo "REMOTE_SERVER_ADDRESS=$REMOTE_SERVER_ADDRESS" >> $GITHUB_ENV
        echo "REMOTE_SERVER_USER_KNOWN_HOSTS_FILE=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE" >> $GITHUB_ENV
