## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
poetry.pkg-path = "poetry"
python3.pkg-path = "python3"
python3.version = "^3.11"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = """
  # Autogenerated by Flox

  # Setup a Python virtual environment

  export POETRY_VIRTUALENVS_PATH="$FLOX_ENV_CACHE/poetry/virtualenvs"

  if [ -z "$(poetry env info --path)" ]; then
    echo "Creating poetry virtual environment in $POETRY_VIRTUALENVS_PATH"
    poetry lock --quiet
  fi

  # Quietly activate venv and install packages in a subshell so
  # that the venv can be freshly activated in the profile section.
  (
    eval "$(poetry env activate)"
    poetry install --quiet
  )

  # End autogenerated by Flox
"""


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
bash = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "$(poetry env activate)"

  # End autogenerated by Flox
"""
fish = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval (poetry env activate)

  # End autogenerated by Flox
"""
tcsh = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "`poetry env activate`"

  # End autogenerated by Flox
"""
zsh = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "$(poetry env activate)"

  # End autogenerated by Flox
"""


## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
# [build.myproject]
# description = "The coolest project ever"
# version = "0.0.1"
# command = """
#   mkdir -p $out/bin
#   cargo build --release
#   cp target/release/myproject $out/bin/myproject
# """


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
# systems = [
#   "aarch64-darwin",
#   "aarch64-linux",
#   "x86_64-darwin",
#   "x86_64-linux",
# ]
# Uncomment to disable CUDA detection.
# cuda-detection = false
