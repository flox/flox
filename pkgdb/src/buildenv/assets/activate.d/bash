# shellcheck shell=bash disable=SC1090,SC1091,SC2154
export _gnused="@gnused@"

# Enable shell-specific profile script startup with verbosity 2.
if [ "$_flox_activate_tracelevel" -ge 2 ]; then
  set -x
fi

# Assert that the expected _{add,del}_env variables are present.
if [ -z "$_add_env" ] || [ -z "$_del_env" ]
then
  echo "ERROR (bash): \$_add_env and \$_del_env not found in environment" >&2;
  exit 1;
fi

# We use --rcfile to activate using bash which skips sourcing ~/.bashrc,
# so source that here, but not if we're already in the process of sourcing
# bashrc in a parent process.
if [ -f ~/.bashrc ] && [ -z "$_flox_already_sourcing_bashrc" ]
then
    export _flox_already_sourcing_bashrc=1
    source ~/.bashrc
    unset _flox_already_sourcing_bashrc
fi

# Restore environment variables set in the previous bash initialization.
eval "$($_gnused/bin/sed -e 's/^/unset /' -e 's/$/;/' "$_del_env")"
eval "$($_gnused/bin/sed -e 's/^/export /' -e 's/$/;/' "$_add_env")"

if [ -t 1 ]; then
  source "$FLOX_ENV/activate.d/set-prompt.bash"
fi

# Source user-specified profile scripts if they exist.
for i in profile-common profile-bash hook-script; do
  if [ -e "$FLOX_ENV/activate.d/$i" ]; then
    source "$FLOX_ENV/activate.d/$i"
  fi
done

# Disable command hashing to allow for newly installed flox packages
# to be found immediately. We do this as the very last thing because
# python venv activations can otherwise return nonzero return codes
# when attempting to invoke `hash -r`.
set +h

# Disable tracing before potentially launching into user shell.
if [ "$_flox_activate_tracelevel" -ge 2 ]; then
  set +x
fi
unset _flox_activate_tracelevel
