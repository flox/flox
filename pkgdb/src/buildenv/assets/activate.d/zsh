export _gnused="@gnused@"
[ "${_FLOX_PKGDB_VERBOSITY:-0}" -le 1 ] || set -x

# Assert that the expected _{add,del}_env variables are present.
[ -n "$_add_env" -a -n "$_del_env" ] || {
  echo 'ERROR (zsh): $_add_env and $_del_env not found in environment' >&2;
  exit 1;
}

# Modify dynamic zsh fpath in preference to FPATH in environment.
# See https://github.com/flox/flox/pull/1299 for more details.
declare -a fpath_prepend=()
for i in "${(@s/:/)FLOX_ENV_DIRS}"; do
  # Check if fpath already contains this env's site-functions directory.
  # The trick here is that the "i" means inverse subscript, meaning that
  # it returns the index of the value which follows, and "e" specifies an
  # exact match. If the value is found it returns the index of the matching
  # element, but if not it returns the length of the array + 1, hence we
  # check for any value greater than the length of the array.
  # TODO: apple puts their stuff first so re-sort fpath by putting flox envs
  #       first by paring the latter appearances from fpath.
  if [[ -n "$i" && $fpath[(ie)$i/share/zsh/site-functions] -gt ${#fpath} ]]; then
    fpath_prepend+=( "$i"/share/zsh/site-functions "$i"/share/zsh/vendor-completions )
  fi
done
if [ ${#fpath_prepend[@]} -gt 0 ]; then
  fpath=( "${fpath_prepend[@]}" "${fpath[@]}" )
  autoload -U compinit
  compinit
fi
unset fpath_prepend

# Restore environment variables set in the previous bash initialization.
eval "$($_gnused/bin/sed -e 's/^/unset /' -e 's/$/;/' $_del_env)"
eval "$($_gnused/bin/sed -e 's/^/export /' -e 's/$/;/' $_add_env)"

# On MacOS Apple have reinvented the wheel and broken our ability to define
# HISTFILE and SHELL_SESSION_DIR variables, so define them up-front here
# so that our env variable replay feature can fix the damage caused by
# their /etc/zshrc* files.
export HISTFILE=$HOME/.zsh_history
export SHELL_SESSION_DIR=$HOME/.zsh_sessions

if [ -t 1 ]; then
  source "$FLOX_ENV/activate.d/set-prompt.zsh"
fi

# Source user-specified profile scripts if they exist.
for i in profile-common profile-zsh hook-script; do
  if [ -e "$FLOX_ENV/activate.d/$i" ]; then
    source "$FLOX_ENV/activate.d/$i"
  fi
done

# Disable command hashing to allow for newly installed flox packages
# to be found immediately. We do this as the very last thing because
# python venv activations can otherwise return nonzero return codes
# when attempting to invoke `hash -r`.
setopt nohashcmds
setopt nohashdirs

if [ "${_FLOX_PKGDB_VERBOSITY:-0}" -ge 2 ]; then
  set +x
fi
