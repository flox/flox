#! /usr/bin/env bats
# --------------------------------------------------------------------------- #
#
# @file tests/check.bats
#
# @brief Test checking environment lockfiles.
#
# Relies on lockfiles generated by `pkgdb` from flox manifests.
#
#
# --------------------------------------------------------------------------- #
#
#
#
# --------------------------------------------------------------------------- #

# bats file_tags=build-env

load setup_suite.bash

# --------------------------------------------------------------------------- #

setup_file() {
  : "${CAT:=cat}"
  : "${TEST:=test}"
  : "${MKDIR:=mkdir}"
  : "${JQ:=jq}"
  export CAT TEST MKDIR JQ

  export MANIFESTS="${TESTS_DIR?}/data/check/lockfiles"

  # Always use a consistent `nixpkgs' input.
  export _PKGDB_GA_REGISTRY_REF_OR_REV="${NIXPKGS_REV?}"
}

# ---------------------------------------------------------------------------- #

# bats test_tags=unfree,unfree:success-by-default
@test "Environment with unfree packages succeeds to locks and produces warnings" {
  run --separate-stderr ${PKGDB_BIN?} manifest lock --ga-registry --manifest "${MANIFESTS?}/unfree/manifest.toml"
  assert_success
  echo "$output" > $BATS_TEST_TMPDIR/manifest.lock

  run ${PKGDB_BIN?} manifest check --lockfile $BATS_TEST_TMPDIR/manifest.lock
  assert_success
  echo "$output" > $BATS_TEST_TMPDIR/warnings.json

  assert [ "$($JQ -r '. | length' $BATS_TEST_TMPDIR/warnings.json)" == "1" ]
  assert [ "$($JQ -r '.[0].package' $BATS_TEST_TMPDIR/warnings.json)" == "hello" ]
}

# ---------------------------------------------------------------------------- #

# bats test_tags=unfree,unfree:fail-if-forbidden
@test "Environment with unfree packages fails to locks if forbidden by options" {
  run -127 --separate-stderr ${PKGDB_BIN?} manifest lock --ga-registry --manifest "${MANIFESTS?}/unfree-forbidden/manifest.toml"
  assert_failure

  assert [ "$(echo "$output" | $JQ -r '.exit_code')" == "127" ]
}

# ---------------------------------------------------------------------------- #

# bats test_tags=broken,broken:fail-by-default
@test "Environment with broken packages fails to lock by default" {
  run -127 --separate-stderr ${PKGDB_BIN?} manifest lock --ga-registry --manifest "${MANIFESTS?}/broken/manifest.toml"
  assert_failure
}

# bats test_tags=broken,broken:lock-if-allowd
@test "Environment with broke package succeeds to lock and produces warnings" {
  run --separate-stderr ${PKGDB_BIN?} manifest lock --ga-registry --manifest "${MANIFESTS?}/broken-allowed/manifest.toml"
  assert_success
  echo "$output" > $BATS_TEST_TMPDIR/manifest.lock

  run ${PKGDB_BIN?} manifest check --lockfile $BATS_TEST_TMPDIR/manifest.lock
  assert_success
  echo "$output" > $BATS_TEST_TMPDIR/warnings.json

  assert [ "$($JQ -r '. | length' $BATS_TEST_TMPDIR/warnings.json)" == "1" ]
  assert [ "$($JQ -r '.[0].package' $BATS_TEST_TMPDIR/warnings.json)" == "yi" ]
}
