#
# This is a flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(1) for more information.
#

# List packages you wish to install in your environment inside
# the `[install]` section.
[install]
_FLOX_INIT_INSTALL

# Set environment variables in the `[vars]` section.  These variables may not
# reference once another, and are added to the environment without first
# expanding them.  THey are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]
# message = "Howdy"

# Scripts defined in the `[profile]` section are sourced by your shell
# immediately after entering the environment and provide a way to add shell
# aliases to the environment or dynamically compute environment variables.  The
# `profile.common` script is sourced by all shells, so you must write it to be
# compatible with all shells. The `profile.bash` and `profile.zsh` scripts will
# only be sourced by the corresponding shell after sourcing the `profile.common`
# script.
[profile]
_FLOX_INIT_PROFILE

# The script defined in `hook.on-activate` is run in a non-interactive Bash
# sub-shell after sourcing the profile scripts. This script inherits all the
# environment variables set in the `[vars]` and `[profile]` sections, but since
# it runs in a sub-shell it can't modify them. The output and exit code of the
# hook script is discarded. The utility of the `hook` script is that it runs in
# a consistent shell environment so you don't have to worry about shell
# compatibility during complicated initialization.
[hook]
_FLOX_INIT_HOOK

# Additional options can be set in the `[options]` section.  Refer to
# manifest.toml(1) for a list of available options.
[options]

# An environment that works on one system is guaranteed to work on the same type
# of system, but other systems may not have the same packages available, etc.
# In order to use the environment on a system you must explicitly add it to the
# `options.systems` list.
systems = ["_FLOX_INIT_SYSTEM"]
