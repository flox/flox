# shellcheck shell=bash
_cat="@coreutils@/bin/cat"
_flox_activations="@flox_activations@"

# Setup Python3
#
# TODO: this function still depends on a few environment variables
# For now I've passed as arguments any we're expecting to be different for
# wrapper mode (except for FLOX_ENV_PROJECT)
# _flox_env_dirs can be empty when in set mode
function setup_python {

  local _profile_variable_mode="${1?}"
  shift
  local _flox_env_dirs="${1?}"
  shift
  if [[ "$_profile_variable_mode" != "set" && -z "$_flox_env_dirs" ]]; then
    echo "Error: _flox_env_dirs cannot be empty when not in 'set' mode" >&2
    exit 1
  fi


  # Only run if `python3' is in `PATH'
  if [[ -x "$FLOX_ENV/bin/python3" ]]; then
    # Get the major/minor version from `python3' to determine the correct path.
    _python_version="$("$FLOX_ENV/bin/python3" -c 'import sys; print( "{}.{}".format( sys.version_info[0], sys.version_info[1] ) )')"
    # This will be appended to each environment directory to form an entry in the
    # PATH-like variable.
    _env_suffix="lib/python${_python_version}/site-packages"
    if [ "$_profile_variable_mode" = "set" ]; then
      # Flox build programs should only find Flox provided modules
      # Note that if a program forks, it's children won't be able to find system
      # provided modules either,
      # but that improves reproducibility
      PYTHONPATH="$FLOX_ENV/$_env_suffix"
    else
      PYTHONPATH="$($_flox_activations prepend-and-dedup --env-dirs "$FLOX_ENV_DIRS" --suffix "$_env_suffix" --path-like "${PYTHONPATH:-}")"
    fi
    export PYTHONPATH
  fi

  # Only run if `pip' is in `PATH' for non-containerize activations.
  # FLOX_ENV_PROJECT is unset in `containerize`, but *is* set for builds and
  # other activations. We don't need a virtual environment inside a container.
  if [[ (-x "$FLOX_ENV/bin/pip3") && (-n "${FLOX_ENV_PROJECT:-}") ]]; then
    PIP_CONFIG_FILE="$FLOX_ENV_PROJECT/.flox/pip.ini"
    export PIP_CONFIG_FILE
    "$_cat" > "$PIP_CONFIG_FILE" << EOF
  [global]
  require-virtualenv = true
EOF
  fi
}

# cmake requires the CMAKE_PREFIX_PATH variable in order to locate libraries
# and include files
function setup_cmake {
  local _profile_variable_mode="${1?}"
  shift
  local _flox_env_dirs="${1?}"
  shift
  if [[ "$_profile_variable_mode" != "set" && -z "$_flox_env_dirs" ]]; then
    echo "Error: _flox_env_dirs cannot be empty when not in 'set' mode" >&2
    exit 1
  fi


  # Only run if `cmake' is installed to the environment.
  if [[ -x "$FLOX_ENV/bin/cmake" ]]; then
    if [ "$_profile_variable_mode" = "set" ]; then
      CMAKE_PREFIX_PATH="$FLOX_ENV"
    else
      CMAKE_PREFIX_PATH="$($_flox_activations prepend-and-dedup --env-dirs "$_flox_env_dirs" --path-like "${CMAKE_PREFIX_PATH:-}")"
    fi
    export CMAKE_PREFIX_PATH
  fi
}
