"$_flox_activate_tracer" "$_activate_d/zsh" START

_sed="@gnused@/bin/sed"
_flox_activations="@flox_activations@"


# Propagate required variables that are documented as exposed.
export FLOX_ENV="${_FLOX_ENV}"

# Propagate optional variables that are documented as exposed.
# NB: `generate_*_start_commands()` performs the same logic except for zsh.
for var_key in FLOX_ENV_CACHE FLOX_ENV_PROJECT FLOX_ENV_DESCRIPTION; do
  eval "var_val=\${_$var_key-}"
  if [ -n "$var_val" ]; then
    export $var_key="${var_val}"
  else
    unset $var_key
  fi
done

# Confirm _flox_activate_tracelevel is defined before proceeding.
if [ -z "${_flox_activate_tracelevel:=}" ]; then
  echo 'WARNING (zsh): _flox_activate_tracelevel not defined .. defaulting to 0' >&2
  export _flox_activate_tracelevel=0
fi

# Enable shell-specific profile script startup with verbosity 2.
if [ "$_flox_activate_tracelevel" -ge 2 ]; then
  set -x
fi

# This is the final script to be called in the zsh startup sequence so start
# by restoring the original value of ZDOTDIR if it was set previously.
if [ -n "${FLOX_ORIG_ZDOTDIR:-}" ]
then
  export ZDOTDIR="$FLOX_ORIG_ZDOTDIR"
  unset FLOX_ORIG_ZDOTDIR
else
  unset ZDOTDIR
fi

# Save FPATH before and after rearranging it so we know whether we need to
# reload completions below.
old_fpath="$FPATH"

# We already customized the PATH and MANPATH, but the user and system
# dotfiles may have changed them, so finish by doing this again.
# We need to restore FLOX_ENV_DIRS before fixing fpath since fpath uses
# FLOX_ENV_DIRS.
# shellcheck disable=SC1090
source <("$_flox_activations" set-env-dirs --shell zsh --flox-env "$FLOX_ENV" --env-dirs "${FLOX_ENV_DIRS:-}")
# shellcheck disable=SC1090
source <("$_flox_activations" fix-paths --shell zsh --env-dirs "$FLOX_ENV_DIRS" --path "$PATH" --manpath "${MANPATH:-}")

# We use `FPATH` as input here so we can re-use machinery for rearranging
# PATH-like variables, but we actually output code to set `fpath` instead.
#
# Setting `FPATH` directly has different (e.g. surprising) behavior compared to
# setting `fpath`. I haven't found first-party documentation stating that this
# is the case, but FPATH/fpath aren't normal shell variables, and if zsh sees
# that `FPATH` is set at startup time, it won't proceed with its normal shell
# function loading procedures (it assumes that `FPATH` is set because you've
# intentionally done so), which will remove completions already installed to
# the system.
#
# For more details on `fpath` and `FPATH`, see:
# - `man zshbuiltins`
# - `man zshparam`
# - https://zsh.sourceforge.io/Doc/Release/Functions.html

# shellcheck disable=SC1090
source <($_flox_activations fix-fpath --colon-separated-fpath "$FPATH" --env-dirs "${FLOX_ENV_DIRS:-}")
new_fpath="$FPATH"

if [ "$old_fpath" != "$new_fpath" ]; then
  autoload -U compinit
  declare -a _flox_compinit_args=()

  # Log the reason for any cache invalidations to STDERR at tracelevel >=1.
  # This flag was introduced in 5.9 but older versions will just ignore it.
  if [ "$_flox_activate_tracelevel" -ge 1 ]; then
    _flox_compinit_args+=( "-w" )
  fi

  # Cache completions in `FLOX_ENV_CACHE` when available. This cache is
  # invalidated when the contents of `fpath` changes, due to installing new
  # packages or layering environments in a different order, or when the version
  # of zsh is changed.
  #
  # `activate` doesn't require `--env-cache` so we have to be careful that
  # `FLOX_ENV_CACHE` is set. `compinit -d` persists the value in the shell as
  # `$_comp_dumpfile` so it may write to the wrong file if environments are
  # layered and the previous one didn't have `--env-cache`.
  if [[ -n "${FLOX_ENV_CACHE:-}" && -d "${FLOX_ENV_CACHE}" ]]; then
    _flox_compinit_args+=( "-d" "${FLOX_ENV_CACHE}/.zcompdump" )
  fi

  # compinit tracing is very verbose so only enable at tracelevel >=3
  #
  # We only need to explicitly handle tracelevel =2 because:
  # - <2 already has tracing disabled
  # - >3 always has tracing enabled
  if [ "$_flox_activate_tracelevel" -eq 2 ]; then
    : compinit tracing suppressed
    set +x
  fi

  compinit "${_flox_compinit_args[@]}"
  unset _flox_compinit_args

  if [ "$_flox_activate_tracelevel" -eq 2 ]; then
    set -x
  fi
fi

# Restore environment variables set in the previous bash initialization.
eval "$($_sed -e 's/^/unset /' -e 's/$/;/' "$_FLOX_ACTIVATION_STATE_DIR/del.env")"
eval "$($_sed -e 's/^/export /' -e 's/$/;/' "$_FLOX_ACTIVATION_STATE_DIR/add.env")"

# Set the prompt if we're in an interactive shell.
if [[ -o interactive ]]; then
  source "$_activate_d/set-prompt.zsh"
fi

# Our ZDOTDIR startup files source user RC files that may modify FLOX_ENV_DIRS,
# and then _flox_env_helper may fix it up.
# If this happens, we want to respect those modifications,
# so we use FLOX_ENV_DIRS from the environment
if [ -n "${_flox_sourcing_rc:-}" ]; then
  # Only source profile scripts for the current environment when activating from
  # an RC file because other environments will source their profile scripts
  # later in the nesting chain.
  profile_script_dirs="$FLOX_ENV"
else
  profile_script_dirs="$FLOX_ENV_DIRS"
fi
# shellcheck disable=SC1090
source <("$_flox_activations" profile-scripts --shell zsh --already-sourced-env-dirs "${_FLOX_SOURCED_PROFILE_SCRIPTS:-}" --env-dirs "$profile_script_dirs")

# Disable command hashing to allow for newly installed flox packages
# to be found immediately. We do this as the very last thing because
# python venv activations can otherwise return nonzero return codes
# when attempting to invoke `hash -r`.
setopt nohashcmds
setopt nohashdirs

# Undo the hashing that plugins like `vcs_info` perform as a side-effect of
# checking `$commands` from `precmd` hooks in interactive shells. We should have
# loaded all user config by now so our hook will come near-to-last. Setting
# `nohashlistall` will prevent them from finding VCS commands altogether.
if [[ -o interactive ]]; then
  # Underscore prefix to prevent it polluting auto-complete.
  function _flox_rehash() {
    hash -r
  }
  autoload -Uz add-zsh-hook
  add-zsh-hook precmd _flox_rehash
fi

# Disable tracing before potentially launching into user shell.
if [ "$_flox_activate_tracelevel" -ge 2 ]; then
  set +x
fi
unset _flox_activate_tracelevel

"$_flox_activate_tracer" "$_activate_d/zsh" END
