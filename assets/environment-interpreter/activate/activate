#!/usr/bin/env bash
# shellcheck shell=bash

# Trace levels supported by activation scripts:
#   1. (-v) top-level activate script
#   2. (-vv) language-specific profile scripts
#   3. (-vvv) zsh `autoload -U compinit` (very verbose)
export _flox_activate_tracelevel="${_FLOX_SUBSYSTEM_VERBOSITY:-0}"
[ "$_flox_activate_tracelevel" -eq 0 ] || set -x

# Ensure that $_flox_activate_tracer is defined as an executable.
if [ -z "${FLOX_ACTIVATE_TRACE-}" ]; then
  # If FLOX_ACTIVATE_TRACE is empty or not set, set _flox_activate_tracer to
  # `true` which can always be invoked with any arguments without error.
  export _flox_activate_tracer=true
else
  # If FLOX_ACTIVATE_TRACE is set but does not refer to an executable, then
  # set _flox_activate_tracer to the default trace script.
  if [ -x "${FLOX_ACTIVATE_TRACE:-}" ]; then
    export _flox_activate_tracer="$FLOX_ACTIVATE_TRACE"
  else
    export _flox_activate_tracer="__OUT__/activate.d/trace"
  fi
fi
"$_flox_activate_tracer" "${BASH_SOURCE[0]}" "$@" START

_bash="@bash@/bin/bash"
_dirname="@coreutils@/bin/dirname"
_getopt="@getopt@/bin/getopt"
_readlink="@coreutils@/bin/readlink"
_flox_activations="@flox_activations@"

set -euo pipefail

# These all derive from the `flox-interpreter` package.
# FIXME This is wrong; the profile.d scripts in particular should be
#       sourced from the environment itself so that users can add pkgs
#       which add additional scripts to the etc/profile.d directory.
export _activate_d="__OUT__/activate.d"
export _profile_d="__OUT__/etc/profile.d"
export _tcsh_home="__OUT__/activate.d/tcsh_home"
export _zdotdir="__OUT__/activate.d/zdotdir"

# shellcheck source-path=SCRIPTDIR/activate.d
source "${_activate_d}/generate-bash-startup-commands.bash"
# shellcheck source-path=SCRIPTDIR/activate.d
source "${_activate_d}/generate-fish-startup-commands.bash"
# shellcheck source-path=SCRIPTDIR/activate.d
source "${_activate_d}/generate-tcsh-startup-commands.bash"
# shellcheck source-path=SCRIPTDIR/activate.d
source "${_activate_d}/helpers.bash"

# Top-level Flox environment activation script.

# Ensure mandatory environment variables are defined as required by
# other scripts. For example, we provide defaults for the following
# variables as required by the various set-prompt scripts, and tcsh
# in particular does not tolerate references to undefined variables.
export FLOX_PROMPT_ENVIRONMENTS="${FLOX_PROMPT_ENVIRONMENTS:-}"
export _FLOX_SET_PROMPT="${_FLOX_SET_PROMPT:-true}"
export FLOX_PROMPT_COLOR_1="${FLOX_PROMPT_COLOR_1:-99}"
export FLOX_PROMPT_COLOR_2="${FLOX_PROMPT_COLOR_2:-141}"

# Parse command-line arguments.
OPTIONS="e:c:m:"
LONGOPTS="command:,\
shell:,\
env:,\
env-cache:,\
env-project:,\
env-description:,\
mode:,\
watchdog:,\
noprofile"
USAGE="Usage: $0 [-c \"<cmd> <args>\"] \
[--shell <shell>] \
[(-e|--env) <env>] \
[--env-cache <path>] \
[--env-project <path>] \
[--env-description <name>] \
[--noprofile] \
[(-m|--mode) (dev|run)] \
[--watchdog <path>]"

if ! PARSED=$("$_getopt" --options="$OPTIONS" --longoptions="$LONGOPTS" --name "$0" -- "$@"); then
  echo "Failed to parse options." >&2
  echo "$USAGE" >&2
  exit 1
fi

# Use eval to remove quotes and replace them with spaces.
eval set -- "$PARSED"

# Set default values for options.
FLOX_CMD=""
FLOX_NOPROFILE="${FLOX_NOPROFILE:-}"
# The rust CLI contains sophisticated logic to detect the shell based on
# $FLOX_SHELL or the process listening on STDOUT, but that won't happen when
# activating from the top-level activation script, so fall back to $SHELL as a
# default.
_FLOX_SHELL="$SHELL"
_FLOX_ENV="$($_dirname -- "${BASH_SOURCE[0]}")"
_FLOX_ENV_ACTIVATION_MODE="dev"
_FLOX_WATCHDOG_BIN=""
while true; do
  case "$1" in
    -c | --command)
      shift
      if [ -z "${1:-}" ]; then
        echo "Option -c requires an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      FLOX_CMD="$1"
      shift
      ;;
    --shell)
      shift
      if [ -z "${1:-}" ]; then
        echo "Option --shell requires a command as an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      _FLOX_SHELL="$1"
      shift
      ;;
    -e | --env)
      shift
      if [ -z "${1:-}" ] || [ ! -d "$1" ]; then
        echo "Option --env requires a valid environment path as an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      _FLOX_ENV="$1"
      shift
      ;;
    --env-cache)
      shift
      if [ -z "${1:-}" ] || [ ! -d "$1" ]; then
        echo "Option --env-cache requires a valid path as an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      _FLOX_ENV_CACHE="$1"
      shift
      ;;
    --env-project)
      shift
      if [ -z "${1:-}" ] || [ ! -d "$1" ]; then
        echo "Option --env-project requires a valid path as an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      _FLOX_ENV_PROJECT="$1"
      shift
      ;;
    --env-description)
      shift
      if [ -z "${1:-}" ]; then
        echo "Option --env-description requires a name as an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      _FLOX_ENV_DESCRIPTION="$1"
      shift
      ;;
    -m | --mode)
      shift
      if [ -z "${1:-}" ] || ! { [ "$1" == "run" ] || [ "$1" == "dev" ] || [ "$1" == "build" ]; }; then
        echo "Option --mode requires 'dev', 'run', or 'build' as an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      _FLOX_ENV_ACTIVATION_MODE="$1"
      shift
      ;;
    --watchdog)
      shift
      if [ -z "${1:-}" ] || [ ! -f "$1" ]; then
        echo "Option --watchdog requires a path to the watchdog binary as an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      _FLOX_WATCHDOG_BIN="$1"
      shift
      ;;
    --noprofile)
      FLOX_NOPROFILE="true"
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Invalid option: $1" >&2
      echo "$USAGE" >&2
      exit 1
      ;;
  esac
done

# If provided, verify that $FLOX_CMD is the only argument, and set _flox_shell_mode
# accordingly. Note that _flox_shell_mode is distinct from "_FLOX_ACTIVATION_MODE".
if [ -n "$FLOX_CMD" ]; then
  # Throw an error if passed additional arguments along with the -c arg.
  if [ $# -gt 0 ]; then
    echo "Unexpected arguments provided with -c argument: $*" >&2
    echo "$USAGE" >&2
    exit 1
  fi
  _flox_shell_mode="command"
elif [ $# -gt 0 ]; then
  # Used for container invocations and builds.
  _flox_shell_mode="command"
elif [ -t 1 ] || [ -n "${_FLOX_FORCE_INTERACTIVE:-}" ]; then
  _flox_shell_mode="interactive"
else
  _flox_shell_mode="inplace"
fi

# Propagate required variables that are documented as exposed.
export FLOX_ENV="${_FLOX_ENV}"

# Propagate optional variables that are documented as exposed.
# NB: `generate_*_start_commands()` performs the same logic except for zsh.
for var_key in FLOX_ENV_CACHE FLOX_ENV_PROJECT FLOX_ENV_DESCRIPTION; do
  eval "var_val=\${_$var_key-}"
  if [ -n "$var_val" ]; then
    export $var_key="${var_val}"
  else
    unset $var_key
  fi
done

# shellcheck disable=SC1090
source <("$_flox_activations" set-env-dirs --shell bash --flox-env "$FLOX_ENV" --env-dirs "${FLOX_ENV_DIRS:-}")
# shellcheck disable=SC1090
source <("$_flox_activations" fix-paths --shell bash --env-dirs "$FLOX_ENV_DIRS" --path "$PATH" --manpath "${MANPATH:-}")

# Set a default for _FLOX_ACTIVATE_STORE_PATH for container and build
# invocations
if [ -z "${_FLOX_ACTIVATE_STORE_PATH:-}" ]; then
  _FLOX_ACTIVATE_STORE_PATH="$("$_readlink" -f "$FLOX_ENV")"
fi

# Respect _FLOX_SHELL_FORCE if set.
declare -r _flox_shell="${_FLOX_SHELL_FORCE:-${_FLOX_SHELL}}"
# Unset FLOX_SHELL to detect the parent shell anew with each flox invocation.
unset FLOX_SHELL

# Bail if the shell is unsupported.
case "$_flox_shell" in
  *bash) ;;
  *fish) ;;
  *tcsh) ;;
  *zsh) ;;
  *)
    echo "Unsupported shell: $_flox_shell" >&2
    exit 1
    ;;
esac

if [ "$_FLOX_ENV_ACTIVATION_MODE" = "build" ]; then
  if [ $# -eq 0 ]; then
    echo "build mode is only supported for running a command" >&2
    exit 1
  fi
  # We don't ever need to attach, and we don't want to run hook.on-activate,
  # so just run the parts of start.bash that we need
  source_profile_d "$_profile_d" "set" "$FLOX_ENV_DIRS"
  # Set static environment variables from the manifest
  set_manifest_vars "$FLOX_ENV"

  exec "$@"
fi

# The CLI is responsible for erroring if the environment is already active.
# We can start-or-attach no matter what

# TODO: we could restore _start_env from the prior activation when performing an ephemeral activation

# sets _FLOX_ATTACH, _FLOX_ACTIVATION_STATE_DIR, _FLOX_ACTIVATION_ID
# Don't eval on one line so that we exit if flox-activations fails
to_eval="$($_flox_activations \
  start-or-attach \
  --runtime-dir "$FLOX_RUNTIME_DIR" \
  --pid "$$" --flox-env "$FLOX_ENV" --store-path "$_FLOX_ACTIVATE_STORE_PATH")"
eval "$to_eval"
export _FLOX_ACTIVATION_STATE_DIR _FLOX_ACTIVATION_ID

# If the current shell is re-activating the same environment then we should only
# re-run profile scripts, without start or attach, because the shell will
# already be attached to an activation.
if [ "$_FLOX_ATTACH" == true ]; then
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/attach.bash"
  attach "$_FLOX_ACTIVATION_STATE_DIR" "$_flox_shell_mode"
else
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/start.bash"
  start "$_FLOX_ACTIVATION_STATE_DIR" "$_flox_shell_mode"
fi

# Start services before the shell or command is invoked
if [ "${FLOX_ACTIVATE_START_SERVICES:-}" == "true" ]; then
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/start-services.bash"
fi

case "${_flox_shell_mode}" in
  command)
    if [ -n "${FLOX_CONTAINERD:-}" ]; then
      exec $_bash --noprofile --norc -c "$FLOX_CMD"
    fi
    # shellcheck source-path=SCRIPTDIR/activate.d
    source "${_activate_d}/attach-command.bash"
    ;;
  interactive)
    # shellcheck source-path=SCRIPTDIR/activate.d
    source "${_activate_d}/attach-interactive.bash"
    ;;
  inplace)
    # shellcheck source-path=SCRIPTDIR/activate.d
    source "${_activate_d}/attach-inplace.bash"
    ;;
  *)
    echo "Unsupported shell mode: ${_flox_shell_mode}" >&2
    exit 1
    ;;
esac

"$_flox_activate_tracer" "${BASH_SOURCE[0]}" "$@" END
