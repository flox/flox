#!/usr/bin/env bash
# shellcheck shell=bash
export _activate_d="@out@/activate.d"
export _bash="@bash@"
export _coreutils="@coreutils@"
export _flox_activations="@flox_activations@"
export _getopt="@getopt@"
export _gnused="@gnused@"
export _jq="@jq@"
export _process_compose="@process-compose@"
export _setsid="@setsid@"
export _tcsh_home="@out@/activate.d/tcsh_home"
export _zdotdir="@out@/activate.d/zdotdir"

# Top-level Flox environment activation script.

# Trace levels supported by activation scripts:
#   1. (-v) top-level activate script
#   2. (-vv) language-specific profile scripts
#   3. (-vvv) zsh `autoload -U compinit` (very verbose)
export _flox_activate_tracelevel="${_FLOX_PKGDB_VERBOSITY:-0}"
[ "$_flox_activate_tracelevel" -eq 0 ] || set -x

# Ensure mandatory environment variables are defined as required by
# other scripts. For example, we provide defaults for the following
# variables as required by the various set-prompt scripts, and tcsh
# in particular does not tolerate references to undefined variables.
export FLOX_PROMPT_ENVIRONMENTS="${FLOX_PROMPT_ENVIRONMENTS:-}"
export _FLOX_SET_PROMPT="${_FLOX_SET_PROMPT:-true}"
export FLOX_PROMPT_COLOR_1="${FLOX_PROMPT_COLOR_1:-99}"
export FLOX_PROMPT_COLOR_2="${FLOX_PROMPT_COLOR_2:-141}"

# Parse command-line arguments.
OPTIONS=c:
LONGOPTS=command:,noprofile,turbo
USAGE="Usage: $0 [-c \"<cmd> <args>\"] [--turbo] [--noprofile]"

PARSED=$("$_getopt/bin/getopt" --options="$OPTIONS" --longoptions="$LONGOPTS" --name "$0" -- "$@")
# shellcheck disable=SC2181
if [[ $? -ne 0 ]]; then
  echo "Failed to parse options."
  exit 1
fi

# Use eval to remove quotes and replace them with spaces.
eval set -- "$PARSED"

# Set default values for options.
FLOX_CMD=""
FLOX_TURBO="${FLOX_TURBO:-}"
FLOX_NOPROFILE="${FLOX_NOPROFILE:-}"
while true; do
  case "$1" in
    -c | --command)
      shift
      if [ -z "$1" ]; then
        echo "Option -c requires an argument." >&2
        echo "$USAGE" >&2
        exit 1
      fi
      FLOX_CMD="$1"
      shift
      ;;
    --turbo)
      FLOX_TURBO="true"
      shift
      ;;
    --noprofile)
      FLOX_NOPROFILE="true"
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Invalid option: $1" >&2
      echo "$USAGE" >&2
      exit 1
      ;;
  esac
done

# Convert the provided command string into an array of arguments in "$@".
# Henceforth in the script it is assumed that these are the arguments to be
# invoked either by this shell (with FLOX_TURBO) or with the chosen userShell.
if [ -n "$FLOX_CMD" ]; then
  # Throw an error if passed additional arguments along with the -c arg.
  if [ $# -gt 0 ]; then
    echo "Unexpected arguments provided with -c argument: $*" >&2
    echo "$USAGE" >&2
    exit 1
  fi

  # Set $@ to reflect the command to be invoked.
  set -- "$FLOX_CMD"
fi

# Set FLOX_ENV as the path by which all flox scripts can make reference to
# the environment to which they belong. Use this to define the path to the
# activation scripts directory.
# TODO: reconcile with CLI which should be setting this. We must override
#       the value coming from the CLI for now because it won't be set for
#       container invocations, and it would have the incorrect value for
#       nested flox activations.
_FLOX_ENV="$($_coreutils/bin/dirname -- "${BASH_SOURCE[0]}")"
if [ -n "$FLOX_ENV" ] && [ "$FLOX_ENV" != "$_FLOX_ENV" ]; then
  echo "WARN: detected change in FLOX_ENV: $FLOX_ENV -> $_FLOX_ENV" >&2
fi
export FLOX_ENV="$_FLOX_ENV"

# The rust CLI contains sophisticated logic to set $FLOX_SHELL based on the
# process listening on STDOUT, but that won't happen when activating from
# the top-level activation script, so fall back to $SHELL as a default.
declare -r _flox_shell="${FLOX_SHELL:-$SHELL}"
# Unset FLOX_SHELL to detect the parent shell anew with each flox invocation.
unset FLOX_SHELL

# Bail if the shell is unsupported.
case "$_flox_shell" in
  *bash) ;;
  *fish) ;;
  *tcsh) ;;
  *zsh) ;;
  *)
    echo "Unsupported shell: $_flox_shell" >&2
    exit 1
    ;;
esac

# Set all other variables derived from FLOX_ENV. We previously did this
# from within the rust CLI but we've moved it to this top-level activation
# script so that it can be invoked without using the flox CLI, e.g. as
# required when invoking the environment from a container entrypoint.

# Identify if this environment has been activated before. If it has,
# then it will appear as an element in the colon-separated FLOX_ENV_DIRS
# variable, and if it hasn't then we'll prepend it to the list and set
# all the other related env variables.
declare -a flox_env_dirs
IFS=: read -ra flox_env_dirs <<< "${FLOX_ENV_DIRS_activate}"
declare -i flox_env_found=0
for d in "${flox_env_dirs[@]}"; do
  if [ "$d" = "$FLOX_ENV" ]; then
    flox_env_found=1
    break
  fi
done

if [ $flox_env_found -eq 0 ] || [ "$_FLOX_ACTIVATE_FORCE_REACTIVATE" == true ]; then
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/start.bash"
else
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/attach.bash"
fi

# Start services before the shell or command is invoked
if [ "$FLOX_ACTIVATE_START_SERVICES" == "true" ]; then
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/start-services.bash"
fi

# From this point on the activation process depends on the mode:
if [ $# -gt 0 ]; then
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/attach-command.bash"
elif [ -t 1 ] || [ -n "$_FLOX_FORCE_INTERACTIVE" ]; then
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/attach-interactive.bash"
else
  # shellcheck source-path=SCRIPTDIR/activate.d
  source "${_activate_d}/attach-inplace.bash"
fi
